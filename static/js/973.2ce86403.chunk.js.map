{"version":3,"file":"static/js/973.2ce86403.chunk.js","mappings":"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","sources":["emulator/joystick.ts","emulator/utility.ts","emulator/games/aztec.ts","emulator/games/firebug.ts","emulator/games/karateka.ts","emulator/games/noxarchaist.ts","emulator/games/snoggle.ts","emulator/games/wizardry.ts","emulator/games/wolfenstein.ts","emulator/game_mappings.ts","emulator/keyboard.ts","emulator/softswitches.ts","emulator/memory.ts","emulator/roms/rom_2e.ts","emulator/instructions.ts","emulator/convertdsk2woz.ts","emulator/decodedisk.ts","emulator/diskdata.ts","emulator/assembler.ts","emulator/harddrivedata.ts","emulator/drivestate.ts","emulator/assemblycode.ts","emulator/roms/slot_disk2_cx00.ts","emulator/cpu6502.ts","emulator/clock.ts","emulator/mockingboard.ts","emulator/motherboard.ts","emulator/worker2main.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { defaultButtons, getGameMapping } from \"./game_mappings\"\nimport { memSetC000 } from \"./memory\"\nimport { SWITCHES } from \"./softswitches\"\n// import { doSaveTimeSlice } from \"./motherboard\"\n// import { addToBufferDebounce } from \"./keyboard\"\n\nlet gamePads: EmuGamepad[]\nconst maxTimeoutCycles = Math.trunc(0.0028*1.020484e6)\nlet paddle0timeout = maxTimeoutCycles / 2\nlet paddle1timeout = maxTimeoutCycles / 2\nlet paddle2timeout = maxTimeoutCycles / 2\nlet paddle3timeout = maxTimeoutCycles / 2\n// let prevPaddle0timeout = paddle0timeout\n// let prevPaddle1timeout = paddle1timeout\nlet countStart = 0\nlet leftAppleDown = false\nlet rightAppleDown = false\nlet leftButtonDown = false\nlet rightButtonDown = false\nlet isPB2down = false\nlet isLeftDown = false\nlet isRightDown = false\n\nexport const setLeftButtonDown = () => { leftButtonDown = true }\nexport const setRightButtonDown = () => { rightButtonDown = true }\nexport const setPushButton2 = () => { isPB2down = true }\n\nconst valueToTimeout = (value: number) => {\n  value = Math.min(Math.max(value, -1), 1)\n  return (value + 1) * maxTimeoutCycles / 2\n}\n\nexport const setGamepad0 = (value: number) => {\n  paddle0timeout = valueToTimeout(value)\n}\nexport const setGamepad1 = (value: number) => {\n  paddle1timeout = valueToTimeout(value)\n}\nexport const setGamepad2 = (value: number) => {\n  paddle2timeout = valueToTimeout(value)\n}\nexport const setGamepad3 = (value: number) => {\n  paddle3timeout = valueToTimeout(value)\n}\n\nexport const setButtonState = () => {\n  const wasLeftDown = isLeftDown\n  const wasRightDown = isRightDown\n  isLeftDown = leftAppleDown || leftButtonDown\n  isRightDown = rightAppleDown || rightButtonDown\n  SWITCHES.PB0.isSet = isLeftDown\n  SWITCHES.PB1.isSet = isRightDown || isPB2down\n  SWITCHES.PB2.isSet = isPB2down\n  if ((isLeftDown && !wasLeftDown) || (isRightDown && !wasRightDown)) {\n//    doSaveTimeSlice()\n  }\n}\n\nexport const pressAppleCommandKey = (isDown: boolean, left: boolean) => {\n  if (left) {\n    leftAppleDown = isDown\n  } else {\n    rightAppleDown = isDown\n  }\n  setButtonState()\n}\n\nexport const resetJoystick = (cycleCount: number) => {\n  memSetC000(0xC064, 0x80)\n  memSetC000(0xC065, 0x80)\n  memSetC000(0xC066, 0x80)\n  memSetC000(0xC067, 0x80)\n  countStart = cycleCount\n}\n\n// const largeDiff = (v1: number, v2: number) => {\n//   return (Math.abs(v1 - v2) > 0.1 * maxTimeoutCycles)\n// }\n\nexport const checkJoystickValues = (cycleCount: number) => {\n//   if (largeDiff(prevPaddle0timeout, paddle0timeout) ||\n//     largeDiff(prevPaddle1timeout, paddle1timeout)) {\n//     prevPaddle0timeout = paddle0timeout\n//     prevPaddle1timeout = paddle1timeout\n//     doSaveTimeSlice()\n//   }\n  const diff = cycleCount - countStart\n  memSetC000(0xC064, (diff < paddle0timeout) ? 0x80 : 0)\n  memSetC000(0xC065, (diff < paddle1timeout) ? 0x80 : 0)\n  memSetC000(0xC066, (diff < paddle2timeout) ? 0x80 : 0)\n  memSetC000(0xC067, (diff < paddle3timeout) ? 0x80 : 0)\n}\n\nlet gameMapping: GameLibraryItem\nlet gamePadMapping: GamePadMapping\nlet isKeyboardJoystick = false\n\nexport const setGamepads = (gamePadsIn: EmuGamepad[]) => {\n  gamePads = gamePadsIn\n  isKeyboardJoystick = !gamePads.length || !gamePads[0].buttons.length\n  gameMapping = getGameMapping()\n  gamePadMapping = gameMapping.gamepad ? gameMapping.gamepad : defaultButtons\n}\n\nconst nearZero = (value: number) => {return value > -0.01 && value < 0.01}\n\nconst convertGamepadAxes = (axes: number[]) => {\n  let xstick = axes[0]\n  let ystick = axes[1]\n  if (nearZero(xstick)) xstick = 0\n  if (nearZero(ystick)) ystick = 0\n  const dist = Math.sqrt(xstick * xstick + ystick * ystick)\n  const clip = 0.95 * ((dist === 0) ? 1 :\n    Math.max(Math.abs(xstick), Math.abs(ystick)) / dist)\n  xstick = Math.min(Math.max(-clip, xstick), clip)\n  ystick = Math.min(Math.max(-clip, ystick), clip)\n  xstick = Math.trunc(maxTimeoutCycles*(xstick + clip)/(2*clip))\n  ystick = Math.trunc(maxTimeoutCycles*(ystick + clip)/(2*clip))\n  return [xstick, ystick]\n}\n\nconst handleGamepad = (gp: number) => {\n  const axes = gameMapping.joystick ?\n    gameMapping.joystick(gamePads[gp].axes, isKeyboardJoystick) : gamePads[gp].axes\n  const stick = convertGamepadAxes(axes)\n  if (gp === 0) {\n    paddle0timeout = stick[0]\n    paddle1timeout = stick[1]\n    leftButtonDown = false\n    rightButtonDown = false\n  } else {\n    paddle2timeout = stick[0]\n    paddle3timeout = stick[1]\n    isPB2down = false\n  }\n  let buttonPressed = false\n  gamePads[gp].buttons.forEach((button, i) => {\n    if (button) {\n      gamePadMapping(i, gamePads.length > 1, gp === 1)\n      buttonPressed = true\n    }\n  });\n  // Special \"no buttons down\" call\n  if (!buttonPressed) gamePadMapping(-1, gamePads.length > 1, gp === 1)\n\n  if (gameMapping.rumble) gameMapping.rumble()\n  setButtonState()\n}\n\nexport const handleGamepads = () => {\n  if (gamePads && gamePads.length > 0) {\n    handleGamepad(0)\n    if (gamePads.length > 1) {\n      handleGamepad(1)\n    }\n  }\n}\n","import { KeyboardEvent } from \"react\"\n\nexport enum STATE {\n  IDLE,\n  NEED_BOOT,\n  NEED_RESET,\n  RUNNING,\n  PAUSED,\n}\n\nexport enum MSG_WORKER {\n  MACHINE_STATE,\n  CLICK,\n  DRIVE_PROPS,\n  DRIVE_SOUND,\n  SAVE_STATE,\n  RUMBLE,\n  HELP_TEXT,\n}\n\nexport enum MSG_MAIN {\n  STATE,\n  DEBUG,\n  BREAKPOINT,\n  STEP_INTO,\n  STEP_OVER,\n  STEP_OUT,\n  SPEED,\n  TIME_TRAVEL,\n  RESTORE_STATE,\n  KEYPRESS,\n  MOUSEEVENT,\n  PASTE_TEXT,\n  APPLE_PRESS,\n  APPLE_RELEASE,\n  GET_SAVE_STATE,\n  DRIVE_PROPS,\n  GAMEPAD,\n  SET_BINARY_BLOCK,\n}\n\nexport enum COLOR_MODE {\n  COLOR,\n  NOFRINGE,\n  GREEN,\n  AMBER\n}\n\nexport enum ARROW {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN\n}\n\nexport type MouseEventSimple = {\n  x : number; // 0.0 -> 1.0\n  y : number; // 0.0 -> 1.0\n  //    -1:  on mouse move\n  //  0x00:  button 0 up\n  //  0x10:  button 0 down\n  //  0x01:  button 1 up\n  //  0x11:  button 1 down\n  buttons : number;\n}\n\nexport const colorToName = (mode: COLOR_MODE) => {\n  return [\"Color\", \"Color (no fringe)\", \"Green\", \"Amber\"][mode]\n}\n\nexport const nameToColorMode = (name: string) => {\n  switch (name) {\n    case \"Color (no fringe)\": return COLOR_MODE.NOFRINGE\n    case \"Green\": return COLOR_MODE.GREEN\n    case \"Amber\": return COLOR_MODE.AMBER\n    default: return COLOR_MODE.COLOR\n  }\n}\n\nexport enum DRIVE {\n  REQUEST_AUDIO,\n  MOTOR_OFF,\n  MOTOR_ON,\n  TRACK_END,\n  TRACK_SEEK,\n}\n\nexport enum MODE {\n  IMPLIED,  // BRK\n  IMM,      // LDA #$01\n  ZP_REL,   // LDA $C0 or BCC $FF\n  ZP_X,     // LDA $C0,X\n  ZP_Y,     // LDX $C0,Y\n  ABS,      // LDA $1234\n  ABS_X,    // LDA $1234,X\n  ABS_Y,    // LDA $1234,Y\n  IND_X,    // LDA ($FF,X) or JMP ($1234,X)\n  IND_Y,    // LDA ($FF),Y\n  IND       // JMP ($1234) or LDA ($C0)\n}\n\n// A hack to determine if this is a relative instruction.\nexport const isRelativeInstr = (instr: string) => instr.startsWith('B') && instr !== \"BIT\" && instr !== \"BRK\"\n\n// export const toBinary = (value: number, ndigits = 8) => {\n//   return (\"0000000000000000\" + value.toString(2)).slice(-ndigits)\n// }\n\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\n\nexport const toHex = (value: number, ndigits = 2) => {\n  if (value > 0xFF) {\n    ndigits = 4\n  }\n  return (\"0000\" + value.toString(16).toUpperCase()).slice(-ndigits)\n}\n\nconst getPStatusString = (P: number) => {\n  const result = ((P & 0x80) ? 'N' : 'n') +\n    ((P & 0x40) ? 'V' : 'v') +\n    '-' +\n    ((P & 0x10) ? 'B' : 'b') +\n    ((P & 0x8) ? 'D' : 'd') +\n    ((P & 0x4) ? 'I' : 'i') +\n    ((P & 0x2) ? 'Z' : 'z') +\n    ((P & 0x1) ? 'C' : 'c')\n  return result\n}\n\nexport const getProcessorStatus = (s6502: STATE6502) => {\n  return (\n    `A=${toHex(s6502.Accum)} X=${toHex(s6502.XReg)} ` +\n    `Y=${toHex(s6502.YReg)} P=${toHex(s6502.PStatus)} ${getPStatusString(s6502.PStatus)} S=${toHex(s6502.StackPtr)}`\n  )\n}\n\nconst modeString = (mode: MODE) => {\n  let prefix = \"\"\n  let suffix = \"\"\n  switch (mode) {\n    case MODE.IMM:\n      prefix = \"#\"\n      break\n    case MODE.ZP_X:\n    case MODE.ABS_X:\n      suffix = \",X\"\n      break\n    case MODE.ZP_Y:\n    case MODE.ABS_Y:\n      suffix = \",Y\"\n      break\n    case MODE.IND:\n      prefix = \"(\"\n      suffix = \")\"\n      break\n    case MODE.IND_X:\n      prefix = \"(\"\n      suffix = \",X)\"\n      break\n    case MODE.IND_Y:\n      prefix = \"(\"\n      suffix = \"),Y\"\n      break\n  }\n  return [prefix, suffix]\n}\n\nexport const getInstrString = (code: PCodeInstr, vLo: number, vHi: number, PC: number) => {\n  let result = `${toHex(PC,4)}`\n  if (code) {\n    let [prefix, suffix] = modeString(code.mode)\n    if (code.PC >= 2) {\n      prefix = `   ${code.name}   ${prefix}$`\n    }\n    if (isRelativeInstr(code.name)) {\n      // The extra +2 is for the branch instruction itself\n      const addr = PC + 2 + (vLo > 127 ? vLo - 256 : vLo)\n      result += `${prefix}${toHex(addr, 4)}${suffix}`\n    } else {\n      switch (code.PC) {\n        case 1:\n          result += `   ${code.name}`\n          break\n        case 2:\n          result += `${prefix}${toHex(vLo)}${suffix}`\n          break\n        case 3:\n          result += `${prefix}${toHex(address(vLo, vHi),4)}${suffix}`\n          break\n      }\n    }\n  } else {\n    result += \"         ???\"\n  }\n  return result\n}\n\nexport const convertAppleKey = (e: KeyboardEvent, uppercase=false) => {\n  let key = 0\n  if (e.key.length === 1) {\n    if (e.metaKey || e.altKey) {\n      return 0\n    }\n    key = e.key.charCodeAt(0)\n    if (e.ctrlKey) {\n      if (key >= 0x40 && key <= 0x7E) {\n        key &= 0b00011111\n      } else {\n        return 0\n      }\n    } else if (uppercase) {\n      key = e.key.toUpperCase().charCodeAt(0)\n    }\n  } else {\n    const keymap: { [key: string]: number } = {\n      Enter: 13,\n      ArrowRight: 21,\n      ArrowLeft: 8,\n      Backspace: 8,\n      ArrowUp: 11,\n      ArrowDown: 10,\n      Escape: 27,\n      Tab: 9,\n      Shift: -1,\n      Control: -1\n    };\n    if (e.key === \"Backspace\" && e.shiftKey) {\n      key = 0x7F\n    } else if (e.key in keymap) {\n      key = keymap[e.key]\n    }\n  }\n  return key\n};\n\nexport const getPrintableChar = (value: number, isAltCharSet: boolean) => {\n  let v1 = value\n  if (isAltCharSet) {\n    if ((v1 >= 0 && v1 <= 31) || (v1 >= 64 && v1 <= 95)) {\n      v1 += 64\n    } else if (v1 >= 128 && v1 <= 159) {\n      v1 -= 64\n    } else if (v1 >= 160) {\n      v1 -= 128\n    }\n  } else {\n    // Shift Ctrl chars and second ASCII's into correct ASCII range\n    if ((v1 >= 0 && v1 <= 0x1f) || (v1 >= 0x60 && v1 <= 0x9f)) {\n      v1 += 64\n    }\n    v1 &= 0b01111111\n  }\n  return v1\n}\n\nlet zpPrev = new Uint8Array(1)\nexport const debugZeroPage = (zp: Uint8Array) => {\n  if (zpPrev.length === 1) zpPrev = zp\n  let diff = \"\"\n  for (let i = 0; i < 256; i++) {\n    if (zp[i] !== zpPrev[i]) {\n      diff += \" \" + toHex(i) + \":\" + toHex(zpPrev[i]) + \">\" + toHex(zp[i])\n    }\n  }\n  if (diff !== \"\") console.log(diff)\n  zpPrev = zp\n}\n\nexport const toASCII = (s: String) => s.split('').map(char => char.charCodeAt(0))\nexport const uint16toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF]\nexport const uint32toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF,\n  (n >>> 16) & 0xFF, (n >>> 24) & 0xFF]\n\nexport const replaceSuffix = (fname: String, suffix: String) => {\n  const i = fname.lastIndexOf('.') + 1\n  return fname.substring(0, i) + suffix\n}\n\nlet crcTable = new Uint32Array(256).fill(0)\n\nconst makeCRCTable = () => {\n  let c;\n  for (let n =0; n < 256; n++) {\n    c = n;\n    for (let k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    crcTable[n] = c;\n  }\n}\n\nexport const crc32 = (data: Uint8Array, offset = 0) => {\n  if (crcTable[255] === 0) {\n    makeCRCTable()\n  }\n  let crc = 0 ^ (-1);\n  for (let i = offset; i < data.length; i++) {\n    crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)) >>> 0;\n};\n","import { addToBuffer, addToBufferDebounce } from \"../keyboard\"\nimport { getTextPageAsString } from \"../memory\"\n\n// AZTEC Controls\n// A, D: move left or right (while using weapon); face left or right (otherwise)\n// W: go to walk mode\n// R: go to run mode\n// C: go to climb mode (ascends steps or mounds)\n// J: jump\n// S: stop walking, running, or climbing\n// G: crawl once\n// P: set explosive (must be crawling)\n// O: open box or clear trash mound\n// L: look in box\n// T: take object from ground or box\n// Z: inventory\n//\n// F: draw machete if you have one, gun otherwise, does nothing if unarmed\n// S: turn around while using weapon\n// L: lunge while using machete\n// M: stab at ground while using machete\n// G: switch from machete to gun\n// <spacebar>: fire gun\nconst gamepad = (button: number) => {\n  switch (button) {\n    case 0: addToBufferDebounce('JL'); break  // jump\n    case 1: addToBufferDebounce('G', 200); break       // crawl\n    case 2: addToBuffer('M'); addToBufferDebounce('O'); break  // open/dig\n    case 3: addToBufferDebounce('L'); break  // look/lunge\n    case 4: addToBufferDebounce('F'); break  // LB\n    case 5: addToBuffer('P'); addToBufferDebounce('T'); break  // 5 RB\n    case 6: break  // 6 LT\n    case 7: break  // 7 RT\n    case 8: addToBufferDebounce('Z'); break  // 8 Select?\n    case 9: const str = getTextPageAsString();\n      if (str.includes(\"'N'\")) {\n        addToBuffer('N');\n      } else if (str.includes(\"'S'\")) {\n        addToBuffer('S');\n      } else if (str.includes(\"NUMERIC KEY\")) {\n        addToBuffer('1');\n      } else {\n        addToBuffer('N');\n      }\n      break  // 9 Start?\n    case 10: break  // 10 Left thumb button\n    case 11: break  // 11 Right thumb button\n    case 12: addToBufferDebounce('L'); break  // 12 D-pad U, climb\n    case 13: addToBufferDebounce('M'); break  // 13 D-pad D, stop/spin\n    case 14: addToBufferDebounce('A'); break // 14 D-pad L\n    case 15: addToBufferDebounce('D'); break // 15 D-pad R\n    case -1: return\n    default: break;\n  }\n  // leftdown = 0\n  // rightdown = 0\n}\n\nlet leftdown = 0\nlet rightdown = 0\nlet buttonreleased = false\nconst threshold = 0.5\nconst joystick = (axes: number[]) => {\n  if (axes[0] < -threshold) {\n    rightdown = 0\n    if (leftdown === 0 || leftdown > 2) {\n      leftdown = 0\n      addToBuffer('A')\n    } else if (leftdown === 1 && buttonreleased) {\n      addToBufferDebounce('W')\n    } else if (leftdown === 2 && buttonreleased) {\n      addToBufferDebounce('R');\n    }\n    leftdown++\n    buttonreleased = false\n    return axes\n  }\n  if (axes[0] > threshold) {\n    leftdown = 0\n    if (rightdown === 0 || rightdown > 2) {\n      rightdown = 0\n      addToBuffer('D')\n    } else if (rightdown === 1 && buttonreleased) {\n      addToBufferDebounce('W');\n    } else if (rightdown === 2 && buttonreleased) {\n      addToBufferDebounce('R');\n    }\n    rightdown++\n    buttonreleased = false\n    return axes\n  }\n  if (axes[1] < -threshold) {\n    addToBufferDebounce('C');\n    return axes\n  } else if (axes[1] > threshold) {\n    addToBufferDebounce('S');\n    return axes\n  }\n  buttonreleased = true\n  return axes\n}\n\n// Aztec gamepad\nconst helptext = \n`AZTEC\nPaul Stephenson, Datamost 1982\n\nW: walk\nR: run\nJ (A button): jump\nS (Thumb down): stop\nC (Thumb up): climb\nA (Thumb left): turn left\nD (Thumb right): turn right\nG (B button): crawl (G to move)\nP (RB button): place and light explosive\nT (RB button): take item\nO (X button): opens box or dig in trash\nL (Y button): look in box\nZ: inventory\n\nF (LB button): goes to fight mode:\n   S (Thumb down): spin around\n   A (Dpad left): move one to left\n   D (Dpad right): move one to right\n   L: lunge with machete\n   M (Dpad down): strike down with machete\n   G (B button): draw gun\n   L (A button): shoot gun\n\nThumbwheel\n              Climb\n  Walk/run left   Walk/run right\n            Stop/spin\n\nD-pad\n        Lunge/shoot\n  Move left    Move right\n        Strike down\n\nA:  jump/lunge/shoot\nB:  crawl/switch to gun\nX:  open box/dig in trash\nY:  look in box\nRB: place explosive (crawling) or take item (box/trash)\nLB: fight mode\nSelect: inventory\nStart:  start the game\n`\n\nexport const aztec: GameLibraryItem = {\n  address: 0x196D,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {},\n  joystick: joystick,\n  gamepad: gamepad,\n  rumble: null,\n  setup: null,\n  helptext: helptext}\n\n","\n\nconst helptext = `FIREBUG\nSilas Warner, Muse Software, 1982\n\nKEYBOARD\nW ↑    up\nX ↓    down\nA ←    left\nD →    right\nS      stop\n\nP or Return   pick up gas can\nM or Space    drop gas can\n\nJOYSTICK\nButton 0: drop gas can\nButton 1: pick up gas can\n`\n\n// Firebug - allows P for pickup, M for drop, for phones\n\nexport const firebug: GameLibraryItem = {\n  address: 0x452A,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {'\\x08': 'A', '\\x15': 'D', '\\x0B': 'W', '\\x0A': 'X', 'P': '\\x0D', 'M': '\\x20'},\n  joystick: null,\n  gamepad: null,\n  rumble: null,\n  setup: null,\n  helptext: helptext}\n\n","import { memGet } from \"../memory\"\nimport { passRumble } from \"../worker2main\"\n\nlet memB6 = 14\nlet memB7 = 14\nconst karatekaRumble = () => {\n  let newValue = memGet(0xB6)\n  if (memB6 < 40 && newValue < memB6) {\n    passRumble({startDelay: 220, duration: 300, weakMagnitude: 1, strongMagnitude: 0})\n  }\n  memB6 = newValue\n  newValue = memGet(0xB7)\n  if (memB7 < 40 && newValue < memB7) {\n    passRumble({startDelay: 220, duration: 300, weakMagnitude: 0, strongMagnitude: 1})\n  }\n  memB7 = newValue\n}\n\nconst helptext = `KARATEKA\nJordan Mechner, Brøderbund 1984\nPress K for Keyboard control\nPress J for Joystick control\n\nKEYBOARD\nFighting stance:\nQ A Z     punch high, middle, low\nW S X     kick high, middle, low\nM . →     advance\nN , ←     retreat\nSpace     stand up\n\nStanding up:\nB         bow\nM . →     run forward\nN , ←     stop\nSpace     fighting stance\n\nJOYSTICK\nPush the joystick up to stand up, and release it to get into a fighting stance.\n\nFighting stance:\nButton 1: punch\nButton 0: kick\nMove the joystick up and down to control the height of your punches  and kicks. Move it right to advance and left to retreat.\n\nTo run forward, start from a standing position. Then move the joystick to the upper right. Press button 1 to bow.\n`\n\n// Karateka - allows N/M and ,/. to work as left/right arrow keys, for phones\nexport const karateka: GameLibraryItem = {\n  address: 0x6E6C,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {'N': '\\x08', 'M': '\\x15', ',': '\\x08', '.': '\\x15'},\n  joystick: null,\n  gamepad: null,\n  rumble: karatekaRumble,\n  setup: null,\n  helptext: helptext}\n\n","import { addToBuffer, addToBufferDebounce } from \"../keyboard\"\n\nconst gamepad = (button: number) => {\n  switch (button) {\n    case 0: addToBufferDebounce('A'); break  // attack\n    case 1: addToBufferDebounce('C', 50); break       // cast\n    case 2: addToBufferDebounce('O'); break  // open\n    case 3: addToBufferDebounce('T'); break  // look\n    case 4: addToBufferDebounce('\\x1B'); break  // 4 LB, ESC\n    case 5: addToBufferDebounce('\\x0D'); break  // 5 RB, Return\n    case 6: break  // 6 LT\n    case 7: break  // 7 RT\n    case 8: addToBuffer('N'); addToBufferDebounce('\\x27'); break  // 8 Select?\n    case 9: addToBuffer('Y'); addToBufferDebounce('1'); break  // 9 Start?\n    case 10: break  // 10 Left thumb button\n    case 11: break  // 11 Right thumb button\n    case 12: break  // 12 D-pad U, Return\n    case 13: addToBufferDebounce('\\x20'); break  // 13 D-pad D, Spacebar\n    case 14: break // 14 D-pad L\n    case 15: addToBufferDebounce('\\x09'); break // 15 D-pad R, Tab\n    case -1: return\n    default: break;\n  }\n}\n\nconst threshold = 0.5\nconst joystick = (axes: number[], isKeyboardJoystick: boolean) => {\n  // If we're only using arrow keys as a joystick, just quietly return,\n  // as Nox already uses arrows for movement and we don't want to double move.\n  if (isKeyboardJoystick) return axes\n  let key1 = (axes[0] < -threshold) ? '\\x08' : (axes[0] > threshold) ? '\\x15' : ''\n  let key2 = (axes[1] < -threshold) ? '\\x0B' : (axes[1] > threshold) ? '\\x0A' : ''\n  // Combine W/E and N/S to allow diagonal moves\n  let key = key1 + key2\n  if (!key) {\n    key = (axes[2] < -threshold) ? 'L\\x08' : (axes[2] > threshold) ? 'L\\x15' : ''\n    if (!key) {\n      key = (axes[3] < -threshold) ? 'L\\x0B' : (axes[3] > threshold) ? 'L\\x0A' : ''\n    }\n  }\n  if (key) {\n    addToBufferDebounce(key, 200)\n  }\n  return [0, 0, 0, 0]\n}\n\nconst helptext = \n`Nox Archaist, Mark Lemmert, 6502 Workshop, 2021\n_______________________________________________\nArrows (Left thumb)  movement\nA (A button)         attack\nC (B button)         cast spell\nO (X button)         open or operate object\nT (Y button)         talk\nL (Right thumb)      look\nSPACE (Dpad down)    pass turn\nRETURN (RB button)   ready item\nTAB  (Dpad right)    inventory\nESC  (LB button)     flee from battle\n\n_____ ADVENTURING _____\nB  board transport or mount\nD  dig (ruins only)\nG  get current location\nH  hide and camp\nI  ignite torch\nJ  jump with your horse\nN  new character order\nQ  quick save game\nS  search\nW  wait for a number of hours\nX  exit transport or mount\nY  yell, go fast on horse/mount\n/  quest log\nV  volume/sound toggle\n=  toggle character icon\n\n_____ COMBAT _____\nF  fire cannon (ships only)\nSHIFT+8   toggle combat math\n+/−  fast/slow scroll speed\n8    pause text scroll\n\n_____ INVENTORY & SHOPPING _____\nTAB     switch to next menu (or press 1-7)\nARROWS  scroll through items or pages\nSPACE   next character\nRETURN  ready/unready item\nI/U/D   Info/Use/Discard item\nB/S  switch to buy/sell (shop)\nRETURN buy or sell item (shop)\nESC    exit inventory/shop\n\n_____ NPC DIALOG _____\nKeywords NAME, JOB, JOIN\nTAB  toggle voice mode\nESC  exit conversation`\n\nexport const noxarchaist: GameLibraryItem = {\n  address: 0x300,\n  data: [0x8D, 0x4A, 0x03, 0x84],\n  keymap: {},\n  gamepad: gamepad,\n  joystick: joystick,\n  rumble: null,\n  setup: null,\n  helptext: helptext}\n\n","import { addToBuffer } from \"../keyboard\";\nimport { memSet } from \"../memory\"\n\nconst helptext = `SNOGGLE\nJun Wada and Ken Iba\nStar Craft (Brøderbund) 1981\n\nKEYBOARD\nA    up\nZ    down\nN , ←     left\nM . →     right\n`\n\nconst gamepad = (button: number) => {\n  switch (button) {\n    case 1: memSet(0x6D, 255); break  // extra life\n    case 12: addToBuffer('A'); break  // 12 D-pad up\n    case 13: addToBuffer('Z'); break  // 13 D-pad down\n    case 14: addToBuffer('\\x08'); break // 14 D-pad left\n    case 15: addToBuffer('\\x15'); break // 15 D-pad right\n    default: break;\n  }\n}\n\nconst threshold = 0.75\nconst joystick = (axes: number[]) => {\n  const key = (axes[0] < -threshold) ? '\\x08' : (axes[0] > threshold) ? '\\x15' :\n    (axes[1] < -threshold) ? 'A' : (axes[1] > threshold) ? 'Z' : ''\n  if (key) {\n    addToBuffer(key)\n  }\n  return axes\n}\n\nconst setup = () => {\n  // Disable splash screen flashing\n  memSet(0x61C1, 0xAD)\n  memSet(0x61CC, 0x40)\n}\n\n// Allow N/M and ,/. to work as left/right arrow keys, for phones\n// Since Snoggle moves all of its memory around after startup, we need to\n// add two mappings - one for the initial help and to disable the splash,\n// and the other to pick up keyboard and joystick handlers.\nexport const snoggle: GameLibraryItem[] = [\n  {\n    address: 0x8866,\n    data: [0x20, 0x00, 0x60],\n    keymap: {},\n    joystick: null,\n    gamepad: null,\n    rumble: null,\n    setup: setup,\n    helptext: helptext\n  },\n  {\n    address: 0x1C7B,\n    data: [0xAD, 0x00, 0xC0],\n    keymap: {'N': '\\x08', 'M': '\\x15', ',': '\\x08', '.': '\\x15'},\n    joystick: joystick,\n    gamepad: gamepad,\n    rumble: null,\n    setup: null,\n    helptext: helptext\n  }]\n","const helptext = \n`Wizardry\nAndrew Greenberg and Robert Woodhead\nSir-Tech Software, 1981\n\n____ Adventuring ____\nW  forward\nA  left\nD  right\nK  kick through a door\nS  update status area\nC  camp\nT  combat message delay time (ms)\nQ  quick plotting - see the LOMILWA spell\nI  inspect for dead bodies\n\n____ Combat ____\nF  fight (# for group)\nP  parry\nS  cast spell\nU  use an item\nR  run!\nD  dispell undead\n`\n\nexport const wizardry: GameLibraryItem = {\n  address: 0xB797,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {},\n  gamepad: null,\n  joystick: null,\n  rumble: null,\n  setup: null,\n  helptext: helptext}\n\n","import { setLeftButtonDown, setRightButtonDown } from \"../joystick\"\nimport { addToBuffer, addToBufferDebounce } from \"../keyboard\"\nimport { getTextPageAsString, memGet, memSet } from \"../memory\"\nimport { passRumble } from \"../worker2main\"\n\nconst helptext = \n`Castle Wolfenstein\nSilas Warner, Muse Software 1981\n\nKEYBOARD:\nQWE\nASD    Movement (S = Stop)\nZXC\n\nIOP\nKL;    Aim gun (L = Fire)\n,./\n\nSpace: Search guards, unlock doors & chests\nT:  Throw grenade\nU:  Use contents of chest\nReturn:  Inventory\n\nJOYSTICK:\nJoystick:  Move or aim\nLeft button (0):  Aim\nRight button (1): Shoot\nX button:  Search/unlock\nY button:  Use chest contents\nRB button: Throw grenade\nLB button: Inventory`\n\nconst gamepad = (button: number) => {\n  switch (button) {\n    case 0: setLeftButtonDown(); break   // aim\n    case 1: setRightButtonDown(); break  // shoot\n    case 2: addToBufferDebounce(' '); break  // search/unlock\n    case 3: addToBufferDebounce('U'); break  // Use chest contents\n    case 4: addToBufferDebounce('\\r'); break\n    case 5: addToBufferDebounce('T'); break\n    case 9: const str = getTextPageAsString();\n      if (str.includes(\"'N'\")) {\n        addToBuffer('N');\n      } else if (str.includes(\"'S'\")) {\n        addToBuffer('S');\n      } else if (str.includes(\"NUMERIC KEY\")) {\n        addToBuffer('1');\n      } else {\n        addToBuffer('N');\n      }\n      break  // 9 Start?\n    case 10: setLeftButtonDown(); break  // 10 Left thumb button\n    case -1: break\n    default: break\n  }\n}\n\nconst wolfsetup = () => {\n  // When you run into the wall, only freak out 4 times\n  memSet(0x1408, 0)\n  memSet(0x140A, 4)\n  // Do not play sounds when crashing into the wall (both locations need NOPs)\n  let i = 0x145A\n  memSet(i, 0xEA)\n  memSet(i + 1, 0xEA)\n  memSet(i + 2, 0xEA)\n  i = 0x1468\n  memSet(i, 0xEA)\n  memSet(i + 1, 0xEA)\n  memSet(i + 2, 0xEA)\n}\n\nconst rumble = () => {\n  if (memGet(0xC01A) < 0x80 && memGet(0xC01D) < 0x80) {\n    passRumble({startDelay: 0, duration: 200, weakMagnitude: 1, strongMagnitude: 0})\n  }\n}\n\nexport const wolfenstein: GameLibraryItem = {\n  address: 0x1289,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {},\n  joystick: null,\n  gamepad: gamepad,\n  rumble: rumble,\n  setup: wolfsetup,\n  helptext: helptext}\n\n","import { matchMemory } from \"./memory\"\nimport { setGamepad0, setGamepad1,\n  setGamepad2,\n  setGamepad3,\n  setLeftButtonDown, setPushButton2, setRightButtonDown } from \"./joystick\"\nimport { passHelptext } from \"./worker2main\"\nimport { aztec } from \"./games/aztec\"\nimport { firebug } from \"./games/firebug\"\nimport { karateka } from \"./games/karateka\"\nimport { noxarchaist } from \"./games/noxarchaist\"\nimport { snoggle } from \"./games/snoggle\"\nimport { wizardry } from \"./games/wizardry\"\nimport { wolfenstein } from \"./games/wolfenstein\"\n\nconst gameLibrary = new Array<GameLibraryItem>()\n\nexport const AddGameLibraryItem = (item: GameLibraryItem | GameLibraryItem[]) => {\n  if (Array.isArray(item)) {\n    gameLibrary.push(...item)\n  } else {\n    gameLibrary.push(item)\n  }\n}\n\nAddGameLibraryItem(aztec)\nAddGameLibraryItem(firebug)\nAddGameLibraryItem(karateka)\nAddGameLibraryItem(noxarchaist)\nAddGameLibraryItem(snoggle)\nAddGameLibraryItem(wizardry)\nAddGameLibraryItem(wolfenstein)\n\nexport const defaultButtons: GamePadMapping = (button: number,\n  dualJoysticks: boolean, isJoystick2: boolean) => {\n  if (isJoystick2) {\n    switch (button) {\n      case 0: setPushButton2(); break  // button #0 becomes push button 2\n      case 1: break  // ignore button #1\n      case 12: setGamepad3(-1); break   // D-pad U\n      case 13: setGamepad3(1); break    // D-pad D\n      case 14: setGamepad2(-1); break   // D-pad L\n      case 15: setGamepad2(1); break    // D-pad R\n      default: break;\n    }\n  } else {\n    switch (button) {\n      case 0: setLeftButtonDown(); break\n      case 1: if (!dualJoysticks) setRightButtonDown(); break\n      case 12: setGamepad1(-1); break   // D-pad U\n      case 13: setGamepad1(1); break    // D-pad D\n      case 14: setGamepad0(-1); break   // D-pad L\n      case 15: setGamepad0(1); break    // D-pad R\n      default: break;\n    }\n  }\n}\n\nconst defaultGame: GameLibraryItem = {\n  address: 0,\n  data: [],\n  keymap: {},\n  gamepad: null,\n  joystick: (axes: number[]) => axes,\n  rumble: null,\n  setup: null,\n  helptext: ''\n}\n\nexport const handleKeyMapping = (key: string) => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      return (key in game.keymap) ? game.keymap[key] : key\n    }   \n  }\n  return key\n}\n\nexport const getGameMapping = () => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      return game\n    }   \n  }\n  return defaultGame\n}\n\nexport const handleGameSetup = (reset = false) => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      passHelptext(game.helptext ? game.helptext : ' ')\n      if (game.setup) game.setup()\n      return\n    }   \n  }\n  if (reset) passHelptext(' ')\n}\n","import { handleKeyMapping } from \"./game_mappings\"\nimport { memGetC000, memSetC000 } from \"./memory\"\nimport { doSaveTimeSlice } from \"./motherboard\"\n\nconst keyPress = (key: number) => {\n  memSetC000(0xC000, key | 0b10000000, 32)\n}\n\n// Make sure that key presses get processed in a timely manner,\n// even if $C010 (the keyboard strobe) isn't being called properly.\n// This was a problem for certain games such as Firebug or Wolfenstein,\n// which only clear the $C010 strobe if it is a valid game key.\n// 1500 ms was heuristically chosen, as that's about how long it takes\n// Applesoft BASIC to process a huge line of code.\n// TODO: We could use two buffers - one for keypress (with a short delay)\n// and another for pasted text, with a longer delay to give Applesoft BASIC\n// time to process\n\nlet keyBuffer = ''\nlet tPrevPop = 1000000000\nexport const popKey = () => {\n  // See note above about this time cutoff before dropping buffer text.\n  const t = performance.now()\n  if (keyBuffer !== '' && (memGetC000(0xC000) < 128 || (t - tPrevPop) > 1500)) {\n    tPrevPop = t\n    let key = keyBuffer.charCodeAt(0)\n    keyPress(key)\n    keyBuffer = keyBuffer.slice(1)\n    if (keyBuffer.length === 0) {\n      doSaveTimeSlice()\n    }\n  }\n}\n\nlet prevKey = ''\n\nexport const addToBuffer = (text: string) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  if (text === prevKey && keyBuffer.length > 0) {\n    return\n  }\n  prevKey = text\n  keyBuffer += text\n}\n\nlet tPrev = 0\n\nexport const addToBufferDebounce = (text: string, timeout = 300) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  const t = performance.now()\n  if ((t - tPrev) < timeout) {\n    return\n  }\n  tPrev = t\n  addToBuffer(text)\n}\n\nexport const sendTextToEmulator = (text: string) => {\n  if (text.length === 1) {\n    text = handleKeyMapping(text)\n  }\n  addToBuffer(text)\n}\n\n// TODO: Does this need its own buffer, so we can guarantee that chars\n// won't get dropped from the text if it takes too long to process?\nexport const sendPastedText = (text: string) => {\n  if (text.length === 1) {\n    text = handleKeyMapping(text)\n  }\n  addToBuffer(text)\n}\n","import { memGetC000, memSetC000 } from \"./memory\"\nimport { popKey } from \"./keyboard\"\nimport { passClickSpeaker } from \"./worker2main\"\nimport { resetJoystick, checkJoystickValues } from \"./joystick\"\nimport { toHex } from \"./utility\"\nimport { s6502 } from \"./instructions\"\n\ntype tSetFunc = ((addr: number, cycleCount: number) => void) | null\n\ntype softSwitch = {\n  offAddr: number\n  onAddr: number\n  isSetAddr: number\n  writeOnly: boolean\n  isSet: boolean\n  setFunc: tSetFunc\n}\n\nconst sswitch: Array<softSwitch> = []\n\nconst NewSwitch = (offAddr: number, isSetAddr: number,\n  writeOnly = false,\n  setFunc: tSetFunc = null): softSwitch => {\n  const result: softSwitch = {\n    offAddr: offAddr,\n    onAddr: offAddr + 1,\n    isSetAddr: isSetAddr,\n    writeOnly: writeOnly,\n    isSet: false,\n    setFunc: setFunc,\n  }\n  if (offAddr >= 0xC000) {\n    sswitch[offAddr - 0xC000] = result\n    sswitch[offAddr + 1 - 0xC000] = result\n  } \n  if (isSetAddr >= 0xC000) {\n    sswitch[isSetAddr - 0xC000] = result\n  } \n  return result\n}\n\nconst rand = () => Math.floor(256 * Math.random())\n\nexport const handleBankedRAM = (addr: number) => {\n  // Only keep bits 0, 1, 3 of the 0xC08* number\n  addr &= 0b1011\n  SWITCHES.READBSR2.isSet = addr === 0\n  SWITCHES.WRITEBSR2.isSet = addr === 1\n  SWITCHES.OFFBSR2.isSet = addr === 2\n  SWITCHES.RDWRBSR2.isSet = addr === 3\n  SWITCHES.READBSR1.isSet = addr === 8\n  SWITCHES.WRITEBSR1.isSet = addr === 9\n  SWITCHES.OFFBSR1.isSet = addr === 0x0A\n  SWITCHES.RDWRBSR1.isSet = addr === 0x0B\n  // Set soft switches for reading the bank-switched RAM status\n  SWITCHES.BSRBANK2.isSet = (addr <= 3)\n  SWITCHES.BSRREADRAM.isSet = [0, 3, 8, 0x0B].includes(addr)\n}\n\nexport const SWITCHES = {\n  STORE80: NewSwitch(0xC000, 0xC018, true),\n  RAMRD: NewSwitch(0xC002, 0xC013, true),\n  RAMWRT: NewSwitch(0xC004, 0xC014, true),\n  INTCXROM: NewSwitch(0xC006, 0xC015, true),\n  ALTZP: NewSwitch(0xC008, 0xC016, true),\n  SLOTC3ROM: NewSwitch(0xC00A, 0xC017, true),\n  COLUMN80: NewSwitch(0xC00C, 0xC01F, true),\n  ALTCHARSET: NewSwitch(0xC00E, 0xC01E, true),\n  KBRDSTROBE: NewSwitch(0, 0xC010, false, () => {\n    const keyvalue = memGetC000(0xC000) & 0b01111111\n    memSetC000(0xC000, keyvalue, 32)\n  }),\n  BSRBANK2: NewSwitch(0, 0xC011),    // status location, not a switch\n  BSRREADRAM: NewSwitch(0, 0xC012),  // status location, not a switch\n  CASSOUT: NewSwitch(0xC020, 0),  // random value filled in checkSoftSwitches\n  SPEAKER: NewSwitch(0xC030, 0, false, (addr, cycleCount) => {\n    memSetC000(0xC030, rand())\n    passClickSpeaker(cycleCount)\n  }),\n  GCSTROBE: NewSwitch(0xC040, 0),    // strobe output to game connector\n  EMUBYTE: NewSwitch(0, 0xC04F, false, () => {memSetC000(0xC04F, 0xCD)}),\n  TEXT: NewSwitch(0xC050, 0xC01A),\n  MIXED: NewSwitch(0xC052, 0xC01B),\n  PAGE2: NewSwitch(0xC054, 0xC01C),\n  HIRES: NewSwitch(0xC056, 0xC01D),\n  AN0: NewSwitch(0xC058, 0),  // random value filled in checkSoftSwitches\n  AN1: NewSwitch(0xC05A, 0),  // random value filled in checkSoftSwitches\n  AN2: NewSwitch(0xC05C, 0),  // random value filled in checkSoftSwitches\n  AN3: NewSwitch(0xC05E, 0),  // random value filled in checkSoftSwitches\n  CASSIN1: NewSwitch(0, 0xC060, false, () => {memSetC000(0xC060, rand())}),\n  PB0: NewSwitch(0, 0xC061),  // status location, not a switch\n  PB1: NewSwitch(0, 0xC062),  // status location, not a switch\n  PB2: NewSwitch(0, 0xC063),  // status location, not a switch\n  JOYSTICK12: NewSwitch(0xC064, 0, false, (addr, cycleCount) => {\n    checkJoystickValues(cycleCount)\n  }),\n  JOYSTICK34: NewSwitch(0xC066, 0, false, (addr, cycleCount) => {\n    checkJoystickValues(cycleCount)\n  }),\n  CASSIN2: NewSwitch(0, 0xC068, false, () => {memSetC000(0xC068, rand())}),\n  FASTCHIP_LOCK: NewSwitch(0xC06A, 0),   // used by Total Replay\n  FASTCHIP_ENABLE: NewSwitch(0xC06B, 0), // used by Total Replay\n  FASTCHIP_SPEED: NewSwitch(0xC06D, 0),  // used by Total Replay\n  JOYSTICKRESET: NewSwitch(0xC070, 0, false, (addr, cycleCount) => {\n    resetJoystick(cycleCount)\n    memSetC000(0xC070, rand())\n  }),\n  BANKSEL: NewSwitch(0xC073, 0),  // Applied Engineering RAMWorks (ignored)\n  LASER128EX: NewSwitch(0xC074, 0),  // used by Total Replay (ignored)\n  READBSR2: NewSwitch(0xC080, 0),\n  WRITEBSR2: NewSwitch(0xC081, 0),\n  OFFBSR2: NewSwitch(0xC082, 0),\n  RDWRBSR2: NewSwitch(0xC083, 0),\n  READBSR1: NewSwitch(0xC088, 0),\n  WRITEBSR1: NewSwitch(0xC089, 0),\n  OFFBSR1: NewSwitch(0xC08A, 0),\n  RDWRBSR1: NewSwitch(0xC08B, 0),\n}\n\nSWITCHES.TEXT.isSet = true\n\nconst skipDebugFlags = [0xC000, 0xC001, 0xC00D, 0xC00F, 0xC030, 0xC054, 0xC055, 0xC01F]\n\nexport const checkSoftSwitches = (addr: number,\n  calledFromMemSet: boolean, cycleCount: number) => {\n  if (addr > 0xFFFFF && !skipDebugFlags.includes(addr)) {\n    const s = memGetC000(addr) > 0x80 ? 1 : 0\n    console.log(`${cycleCount} $${toHex(s6502.PC)}: $${toHex(addr)} [${s}] ${calledFromMemSet ? \"write\" : \"\"}`)\n  }\n  // Handle banked-RAM soft switches, since these have duplicate addresses\n  // and need to call our special function.\n  if (addr >= 0xC080 && addr <= 0xC08F) {\n    // $C084...87 --> $C080...83, $C08C...8F --> $C088...8B\n    addr -= addr & 4\n    handleBankedRAM(addr)\n    return\n  }\n  if (addr === 0xC000 && !calledFromMemSet) {\n    popKey()\n    return\n  }\n  const sswitch1 = sswitch[addr - 0xC000]\n  if (!sswitch1) {\n    console.error(\"Unknown softswitch \" + toHex(addr))\n    memSetC000(addr, rand())\n    return\n  }\n  if (sswitch1.setFunc) {\n    sswitch1.setFunc(addr, cycleCount)\n    return\n  }\n  if (addr === sswitch1.offAddr || addr === sswitch1.onAddr) {\n    if (!sswitch1.writeOnly || calledFromMemSet) {\n      sswitch1.isSet = (addr === sswitch1.onAddr)\n    }\n    if (sswitch1.isSetAddr) {\n      memSetC000(sswitch1.isSetAddr, sswitch1.isSet ? 0x8D : 0x0D)\n    }\n    // Many games expect random \"noise\" from these soft switches.\n    if (addr >= 0xC020) memSetC000(addr, rand())\n  } else if (addr === sswitch1.isSetAddr) {\n    memSetC000(addr, sswitch1.isSet ? 0x8D : 0x0D)\n  }\n}\n","import { SWITCHES, checkSoftSwitches } from \"./softswitches\";\nimport { cycleCount, s6502 } from \"./instructions\"\nimport { romBase64 } from \"./roms/rom_2e\"\nimport { Buffer } from \"buffer\";\nimport { handleGameSetup } from \"./game_mappings\";\nimport { inVBL } from \"./motherboard\";\n\n// 00000: main memory\n// 10000: aux memory \n// 20000...23FFF: ROM\n// 24000...246FF: Slots 1-7\n// Bank1 of $D000-$DFFF is stored at 0x*D000-0x*DFFF (* 0 for main, 1 for aux)\n// Bank2 of $D000-$DFFF is stored at 0x*C000-0x*CFFF (* 0 for main, 1 for aux)\nexport let memory = (new Uint8Array(600 * 256)).fill(0)\n\n// Mappings from real Apple II address to memory array above.\n// 256 pages of memory, from $00xx to $FFxx.\n// Include one extra slot, to avoid needing memory checks for > 65535.\nconst addressGetTable = (new Array<number>(257)).fill(0)\nconst addressSetTable = (new Array<number>(257)).fill(0)\n\nconst ROMindexMinusC0 = 0x200 - 0xC0\nconst SLOTindexMinusC1 = 0x240 - 0xC1\nconst AUXindex = 0x100\nconst ROMstartMinusC000 = 256 * ROMindexMinusC0\nconst SLOTstartMinusC100 = 256 * SLOTindexMinusC1\nconst AUXstart = 256 * AUXindex\n\nconst updateMainAuxMemoryTable = () => {\n  const offsetAuxRead = SWITCHES.RAMRD.isSet ? AUXindex : 0\n  const offsetAuxWrite = SWITCHES.RAMWRT.isSet ? AUXindex : 0\n  const offsetPage2 = SWITCHES.PAGE2.isSet ? AUXindex : 0\n  const offsetTextPageRead = SWITCHES.STORE80.isSet ? offsetPage2 : offsetAuxRead\n  const offsetTextPageWrite = SWITCHES.STORE80.isSet ? offsetPage2 : offsetAuxWrite\n  const offsetHgrPageRead = (SWITCHES.STORE80.isSet && SWITCHES.HIRES.isSet) ? offsetPage2 : offsetAuxRead\n  const offsetHgrPageWrite = (SWITCHES.STORE80.isSet && SWITCHES.HIRES.isSet) ? offsetPage2 : offsetAuxWrite\n  for (let i = 2; i < 256; i++) {\n    addressGetTable[i] = i + offsetAuxRead;\n    addressSetTable[i] = i + offsetAuxWrite;\n  }\n  for (let i = 4; i <= 7; i++) {\n    addressGetTable[i] = i + offsetTextPageRead;\n    addressSetTable[i] = i + offsetTextPageWrite;\n  }\n  for (let i = 0x20; i <= 0x3F; i++) {\n    addressGetTable[i] = i + offsetHgrPageRead;\n    addressSetTable[i] = i + offsetHgrPageWrite;\n  }\n}\n\nconst updateReadBankSwitchedRamTable = () => {\n  const offsetZP = SWITCHES.ALTZP.isSet ? AUXindex : 0\n  addressGetTable[0] = offsetZP;\n  addressGetTable[1] = 1 + offsetZP;\n  addressSetTable[0] = offsetZP;\n  addressSetTable[1] = 1 + offsetZP;\n  if (SWITCHES.BSRREADRAM.isSet) {\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressGetTable[i] = i + offsetZP;\n    }\n    if (!SWITCHES.BSRBANK2.isSet) {\n      // Bank1 of $D000-$DFFF is actually in 0xC0...0xCF\n      for (let i = 0xD0; i <= 0xDF; i++) {\n        addressGetTable[i] = i - 0x10 + offsetZP;\n      }\n    }\n  } else {\n    // ROM ($D000...$FFFF) is in 0x210...0x23F\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressGetTable[i] = ROMindexMinusC0 + i;\n    }\n  }\n}\n\nconst updateWriteBankSwitchedRamTable = () => {\n  const offsetZP = SWITCHES.ALTZP.isSet ? AUXindex : 0\n  const writeRAM = SWITCHES.WRITEBSR1.isSet || SWITCHES.WRITEBSR2.isSet ||\n    SWITCHES.RDWRBSR1.isSet || SWITCHES.RDWRBSR2.isSet\n  if (writeRAM) {\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressSetTable[i] = i + offsetZP;\n    }\n    if (!SWITCHES.BSRBANK2.isSet) {\n      // Bank1 of $D000-$DFFF is actually in 0xC0...0xCF\n      for (let i = 0xD0; i <= 0xDF; i++) {\n        addressSetTable[i] = i - 0x10 + offsetZP;\n      }\n    }\n  } else {\n    // ROM is not writeable\n    for (let i = 0xC0; i <= 0xFF; i++) {\n      addressSetTable[i] = -1;\n    }\n  }\n}\n\nconst slotIsActive = (slot: number) => {\n  if (SWITCHES.INTCXROM.isSet) return false\n  // SLOTC3ROM switch only has an effect if INTCXROM is off\n  return (slot !== 3) ? true : SWITCHES.SLOTC3ROM.isSet\n}\n\nconst updateSlotRomTable = () => {\n  // ROM ($C000...$CFFF) is in 0x200...0x20F\n  addressGetTable[0xC0] = ROMindexMinusC0\n  for (let slot = 1; slot <= 7; slot++) {\n    const page = 0xC0 + slot\n    addressGetTable[page] = page +\n      (slotIsActive(slot) ? SLOTindexMinusC1 : ROMindexMinusC0)\n  }\n  // TODO: Currently, $C800-$CFFF is not being filled in for cards.\n  for (let i = 0xC8; i <= 0xCF; i++) {\n    addressGetTable[i] = ROMindexMinusC0 + i;\n  }\n}\n\nexport const updateAddressTables = () => {\n  updateMainAuxMemoryTable()\n  updateReadBankSwitchedRamTable()\n  updateWriteBankSwitchedRamTable()\n  updateSlotRomTable()\n  // Scale all of our mappings up by 256 to get to offsets in memory array.\n  for (let i = 0; i < 256; i++) {\n    addressGetTable[i] = 256 * addressGetTable[i];\n    addressSetTable[i] = 256 * addressSetTable[i];\n  }\n}\n\n// Used for jumping to custom TS functions when program counter hits an address.\nexport const specialJumpTable = new Map<number, () => void>();\n\n// Custom callbacks for mem get/set to $C090-$C0FF slot I/O and $C100-$C7FF.\nconst slotIOCallbackTable = new Array<AddressCallback>(8)\n\n// Value = -1 indicates that this was a read/get operation\nconst checkSlotIO = (addr : number, value = -1) => {\n  const slot = ((addr >> 8) === 0xC0) ? ((addr - 0xC080) >> 4) : ((addr >> 8) - 0xC0)\n  if (addr >= 0xC100 && !slotIsActive(slot)) {\n    return\n  }\n  const fn = slotIOCallbackTable[slot]\n  if (fn !== undefined) {\n    const result = fn(addr, value)\n    if (result >= 0) {\n      // Set value in either slot memory or $C000 softswitch memory\n      const offset = (addr >= 0xC100) ? SLOTstartMinusC100 : ROMstartMinusC000\n      memory[addr + offset] = result\n    }\n  }\n}\n\n/**\n * Add peripheral card IO callback.\n *\n * @param slot - The slot number 1-7.\n * @param fn - A function to jump to when IO of this slot is accessed\n */\nexport const setSlotIOCallback = (slot: number, fn: AddressCallback) => {\n  slotIOCallbackTable[slot] = fn;\n}\n\n/**\n * Add peripheral card ROM.\n *\n * @param slot - The slot number 1-7.\n * @param driver - The ROM code for the driver.\n * @param jump - (optional) If the program counter equals this address, then `fn` will be called.\n * @param fn - (optional) The function to jump to.\n */\nexport const setSlotDriver = (slot: number, driver: Uint8Array, jump = 0, fn = () => {}) => {\n  memory.set(driver, SLOTstartMinusC100 + 0xC000 + slot * 0x100)\n  if (jump) {\n    specialJumpTable.set(jump, fn)\n  }\n}\n\nexport const memoryReset = () => {\n  memory.fill(0xFF, 0, 0x1FFFF)\n  const rom64 = romBase64.replace(/\\n/g, \"\")\n  const rom = new Uint8Array(\n    Buffer.from(rom64, \"base64\")\n  )\n  memory.set(rom, ROMstartMinusC000 + 0xC000)\n  updateAddressTables()\n}\n\n// Fill all pages of either main or aux memory with 0, 1, 2,...\nexport const memorySetForTests = (aux = false) => {\n  memoryReset()\n  const offset = aux ? AUXstart : 0\n  for (let i=0; i <= 0xFF; i++) {\n    memory.fill(i, i * 256 + offset, (i + 1) * 256 + offset)\n  }\n}\n\n// Set $C007: FF to see this code\n// Hack to change the cursor\n// rom[0xC26F - 0xC000] = 161\n// rom[0xC273 - 0xC000] = 161\n// Hack to speed up the cursor\n// rom[0xC288 - 0xC000] = 0x20\n\nexport const readWriteAuxMem = (addr: number, write = false) => {\n  let useAux = write ? SWITCHES.RAMWRT.isSet : SWITCHES.RAMRD.isSet\n  if (addr <= 0x1FF || addr >= 0xC000) {\n    useAux = SWITCHES.ALTZP.isSet\n  } else if (addr >= 0x400 && addr <= 0x7FF) {\n    if (SWITCHES.STORE80.isSet) {\n      useAux = SWITCHES.PAGE2.isSet\n    }\n  } else if (addr >= 0x2000 && addr <= 0x3FFF) {\n    if (SWITCHES.STORE80.isSet) {\n      if (SWITCHES.HIRES.isSet) {\n        useAux = SWITCHES.PAGE2.isSet\n      }\n    }\n  }\n  return useAux\n}\n\nconst memGetSoftSwitch = (addr: number): number => {\n  // $C019 Vertical blanking status (0 = vertical blanking, 1 = beam on)\n  if (addr === 0xC019) {\n    // Return \"low\" for 70 scan lines out of 262 (70 * 65 cycles = 4550)\n    return inVBL ? 0x0D : 0x8D\n  }\n  if (addr >= 0xC090) {\n    checkSlotIO(addr)\n  } else {\n    checkSoftSwitches(addr, false, cycleCount)\n  }\n  if (addr >= 0xC050) {\n    updateAddressTables()\n  }\n  return memory[ROMstartMinusC000 + addr]\n}\n\nexport const debugSlot = (slot: number, addr: number, value = -1) => {\n  if (!slotIsActive(slot)) return\n  if (((addr - 0xC080) >> 4) === slot || ((addr >> 8) - 0xC0) === slot) {\n    let s = `$${s6502.PC.toString(16)}: $${addr.toString(16)}`\n    if (value >= 0) s += ` = $${value.toString(16)}`\n    console.log(s)\n  }\n}\n\nexport const memGet = (addr: number): number => {\n  const page = addr >>> 8\n  // debugSlot(4, addr)\n  if (page === 0xC0) {\n    return memGetSoftSwitch(addr)\n  }\n  if (page >= 0xC1 && page <= 0xCF) {\n    checkSlotIO(addr)\n  }\n  const shifted = addressGetTable[page]\n  return memory[shifted + (addr & 255)]\n}\n\nconst memSetSoftSwitch = (addr: number, value: number) => {\n  if (addr >= 0xC090) {\n    checkSlotIO(addr, value)\n  } else {\n    checkSoftSwitches(addr, true, cycleCount)\n  }\n  if (addr <= 0xC00F || addr >= 0xC050) {\n    updateAddressTables()\n  }\n}\n\nexport const memSet = (addr: number, value: number) => {\n  const page = addr >>> 8\n  // debugSlot(4, addr, value)\n  if (page === 0xC0) {\n    memSetSoftSwitch(addr, value)\n  } else {\n    if (page >= 0xC1 && page <= 0xCF) {\n      checkSlotIO(addr)\n    }\n    const shifted = addressSetTable[page]\n    if (shifted < 0) return\n    memory[shifted + (addr & 255)] = value\n  }\n}\n\nexport const memGetC000 = (addr: number) => {\n  return memory[ROMstartMinusC000 + addr]\n}\n\nexport const memSetC000 = (addr: number, value: number, repeat = 1) => {\n  const start = ROMstartMinusC000 + addr\n  memory.fill(value, start, start + repeat)\n}\n\nconst TEXT_PAGE1 = 0x400\nconst TEXT_PAGE2 = 0x800\nconst offset = [\n  0, 0x80, 0x100, 0x180, 0x200, 0x280, 0x300, 0x380, 0x28, 0xA8, 0x128, 0x1A8,\n  0x228, 0x2A8, 0x328, 0x3A8, 0x50, 0xD0, 0x150, 0x1D0, 0x250, 0x2D0, 0x350,\n  0x3D0,\n]\n\nexport const getTextPage = (getLores = false) => {\n  let jstart = 0\n  let jend = 24\n  let is80column = false\n  if (getLores) {\n    if (SWITCHES.TEXT.isSet || SWITCHES.HIRES.isSet) {\n      return new Uint8Array()\n    }\n    jend = SWITCHES.MIXED.isSet ? 20 : 24\n    is80column = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  } else {\n    if (!SWITCHES.TEXT.isSet && !SWITCHES.MIXED.isSet) {\n      return new Uint8Array()\n    }\n    if (!SWITCHES.TEXT.isSet && SWITCHES.MIXED.isSet) jstart = 20\n    is80column = SWITCHES.COLUMN80.isSet\n  }\n  if (is80column) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(80 * (jend - jstart)).fill(0xA0)\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 80 * (j - jstart)\n      for (let i = 0; i < 40; i++) {\n        textPage[joffset + 2 * i + 1] = memory[pageOffset + offset[j] + i]\n        textPage[joffset + 2 * i] = memory[AUXstart + pageOffset + offset[j] + i]\n      }\n    }\n    return textPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(40 * (jend - jstart))\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 40 * (j - jstart)\n      let start = pageOffset + offset[j]\n      textPage.set(memory.slice(start, start + 40), joffset)\n    }\n    return textPage\n  }\n}\n\nexport const getTextPageAsString = () => {\n  return Buffer.from(getTextPage().map((n) => (n &= 127))).toString()\n}\n\nexport const getHires = () => {\n  if (SWITCHES.TEXT.isSet || !SWITCHES.HIRES.isSet) {\n    return new Uint8Array()\n  }\n  const doubleRes = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  const nlines = SWITCHES.MIXED.isSet ? 160 : 192\n  if (doubleRes) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(80 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      for (let i = 0; i < 40; i++) {\n        hgrPage[j * 80 + 2 * i + 1] = memory[addr + i]\n        hgrPage[j * 80 + 2 * i] = memory[AUXstart + addr + i]\n      }\n    }\n    return hgrPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(40 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      hgrPage.set(memory.slice(addr, addr + 40), j * 40)\n    }\n    return hgrPage\n  }\n}\n\nexport const getDataBlock = (addr: number) => {\n  const offset = addressGetTable[addr >>> 8]\n  return memory.slice(offset, offset + 512)\n}\n\nexport const setMemoryBlock = (addr: number, data: Uint8Array) => {\n  const offset = addressSetTable[addr >>> 8] + (addr & 255)\n  memory.set(data, offset)\n  handleGameSetup()\n}\n\nexport const matchMemory = (addr: number, data: number[]) => {\n  for (let i = 0; i < data.length; i++) {\n   if (memGet(addr + i) !== data[i]) return false\n  }\n  return true\n}\n","export const romBase64=`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\ncM5oYLEoLB/AEBmNAcCEKphFIGqwBK1VwMiYSqixKCxUwKQqLB7AEAbJILACCUBg\nSCn/MBat+wRqaEiQDiwewBAJSUAsrM7wAklALB/AEB2NAcBIhCqYRSBKsAStVcDI\nmEqoaJEorVTApCpoYJEoaGBImEisewUgRM6NewYpgEmrTM3OSJhIrHsFrXsGIHDO\naKhoYCBxzan/hTKt+wQpBPACRjKteweFKK37B4UprfsFhSVgLBLAED2pBs2z+/A2\nogMsEcAwAqILjbP7LIDArbP7yQbwAegsgcAsgcCgAKn4hTeENrE2kTbI0PnmN9D1\nvYDAvYDAYAAAAOmBStAUpD+mPtABiMqKGOU6hT4QAciY5TvQQKQvuT0AkTqIEPgg\nSPkgGvwgGvxM4/ylPSCO+Kq9APrFQtATvcD5xUPQDKVEpC7AnfCzxS7wysY90Nzm\nRMY18NakNJiqTNL8IMf/rQACyaDwEsmN0AFgIKf/yZPQ5Yrw4iB4/qkDhT0gE/8K\n6b7JwpDRCgqiBAomQiZDyhD4xj3w9BDkogUgyMSlRAoKBTXJILAGpjXwAgmAhUSE\nNLkAAsm78ATJjdC0TGvP32/YZdf43JTZsdsw89jf4duP85jz5PHd8dTxJPIx8kDy\n1/Ph8+j2/fZo92735vdX/CD3Jvd092zybvJy8nbyf/JO8mrZVfKF8qXyyvIX87vz\nnvNh8kXaPdkR2cjZSNj0AyDZatnb2W3Y69mD58jYr9gS43rn1NqV2KTWadaf20jW\nkOsj7K/rCgDe4hLUzd//4o3uru9B6Qnv6u/x7zrwnvBk59bmxeMH5+XmRuZa5obm\nkeZ5wOd5qed7gel7aOp9lu5QVN9GTt9/z+5/l95kZN9FTsRGT9JORVjUREFUwUlO\nUFXUREXMREnNUkVBxEfSVEVY1FBSo0lOo0NBTMxQTE/USExJzlZMSc5IR1KySEfS\nSENPTE9SvUhQTE/URFJB11hEUkHXSFRBwkhPTcVST1S9U0NBTEW9U0hMT0HEVFJB\nQ8VOT1RSQUPFTk9STUHMSU5WRVJTxUZMQVPIQ09MT1K9UE/QVlRBwkhJTUVNukxP\nTUVNuk9ORVLSUkVTVU3FUkVDQUzMU1RPUsVTUEVFRL1MRdRHT1TPUlXOScZSRVNU\nT1LFpkdPU1XCUkVUVVLOUkXNU1RP0E/OV0FJ1ExPQcRTQVbFREXGUE9LxVBSSU7U\nQ09O1ExJU9RDTEVB0kdF1E5F11RBQqhUz0bOU1BDqFRIRc5B1E5P1FNURdCrraqv\n3kFOxE/Svr28U0fOSU7UQULTVVPSRlLFU0NSTqhQRMxQT9NTUdJSTsRMT8dFWNBD\nT9NTSc5UQc5BVM5QRUXLTEXOU1RSpFZBzEFTw0NIUqRMRUZUpFJJR0hUpE1JRKQA\nTkVYVCBXSVRIT1VUIEZP0lNZTlRB2FJFVFVSTiBXSVRIT1VUIEdPU1XCT1VUIE9G\nIERBVMFJTExFR0FMIFFVQU5USVTZT1ZFUkZMT9dPVVQgT0YgTUVNT1LZVU5ERUYn\nRCBTVEFURU1FTtRCQUQgU1VCU0NSSVDUUkVESU0nRCBBUlJB2URJVklTSU9OIEJZ\nIFpFUs9JTExFR0FMIERJUkVD1FRZUEUgTUlTTUFUQ8hTVFJJTkcgVE9PIExPTsdG\nT1JNVUxBIFRPTyBDT01QTEXYQ0FOJ1QgQ09OVElOVcVVTkRFRidEIEZVTkNUSU/O\nIEVSUk9SBwAgSU4gAA1CUkVBSwcAuujo6Oi9AQHJgdAhpYbQCr0CAYWFvQMBhYbd\nAwHQB6WF3QIB8AeKGGkSqtDYYCDj04VthG44pZblm4VeqKWX5Zyq6JjwI6WWOOVe\nhZawA8aXOKWU5V6FlLAIxpWQBLGWkZSI0PmxlpGUxpfGlcrQ8mAKaTawNYVeuuRe\nkC5gxHCQKNAExW+QIkiiCZhItZPKEPoghOSi92iVnegw+mioaMRwkAbQBcVvsAFg\nok0k2BADTOnyIPvaIFrbvWDSSCBc2+hoEPUgg9apUKDTIDrbpHbI8AMgGe0g+9qi\n3SAu1Ya4hLlG2CCxAKrw7KL/hnaQBiBZ1UwF2KavhmmmsIZqIAzaIFnVhA8gGtaQ\nRKABsZuFX6VphV6lnIVhpZuI8ZsYZWmFaYVgpWpp/4Vq5ZyqOKWb5WmosAPoxmEY\nZV6QA8ZfGLFekWDI0PnmX+ZhytDyrQAC8Dilc6R0hW+EcKVphZZlD4WUpGqEl5AB\nyISVIJPTpVCkUY3+AYz/AaVtpG6FaYRqpA+5+wGIkZvQ+CBl1qVnpGiFXoRfGKAB\nsV7QC6Vpha+laoWwTDzUoATIsV7Q+8iYZV6qoACRXqVfaQDIkV6GXoVfkNKigIYz\nIGr94O+QAqLvqQCdAAKK8Au9/wEpf53/AcrQ9akAov+gAWAgDP0pf2CmuMqgBIQT\n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\n5opMi/4g+OaKTJX+IPjm4DCwE4bwqSwgwN4g+ObgMLAFhiyGLWBMmeEg7PHk8LAI\npfCFLIUthvCpxSDA3iD45uAwsOJgIOzxiqTwwCiw10wA+CAJ8oqkLMAosMqk8EwZ\n+CAJ8oqowCiwvKXwTCj4IPjmikxk+CD45sqKyRiwp0xb+yD45opJ/6rohvFgOJAY\nZvJgqf/QAqk/ogCFMobzYKl/okDQ9SBn3SBS56VQxW2lUeVusANMENSlUIVzhW+l\nUYV0hXBgIGfdIFLnpVDFc6VR5XSw4KVQxWmlUeVqkNalUIVppVGFakxs1qmrIMDe\npbiF9KW5hfU4ZtildYX2pXaF9yCm2UyY2YbepviG36V1hdqldoXbpXmF3KV6hd2l\n9IW4pfWFuaX2hXWl94V2ILcAID7ZTNLXpdqFdaXbhXal3IW4pd2FuabfmkzS10zJ\n3rD7pq+GaaawhmogDNogGtalm4VgpZyFYaksIMDeIAza5lDQAuZRIBrWpZvFYKWc\n5WGwAWCgALGbkWDmm9AC5pzmYNAC5mGlacWbpWrlnLDmpmGkYNAByoiGaoRpTPLU\nrVbArVPATED7rVTATDn7INn3oAOxm6qIsZvpAbAByoVQhlEgzf4gd/dMzf4g2fcg\n/f6gArGbxVDIsZvlUbADTBDUIHf3TP3+LFXALFLAqUDQCKkgLFTALFPAheatV8Ct\nUMCpAIUcpeaFG6AAhBqlHJEaIH70yND25hulGykf0O5gheKG4IThSCnAhSZKSgUm\nhSZohScKCgomJwomJwpmJqUnKR8F5oUnisAA8AWgI2kEyOkHsPuE5aq9ufSFMJhK\npeSFHLAoYCAR9KUcUSYlMFEmkSZgECOlMEqwBUnAhTBgiBACoCepwIUwhOWlHArJ\nwBAGpRxJf4UcYKUwCkmAMN2pgcjAKJDgoACw3Bil0SkE8CWpfyUwMSbQGebqqX8l\nMBARGKXRKQTwDrEmRRwlMNAC5upRJpEmpdFl0ykDyQJqsJIwMBilJyy59dAiBiaw\nGizN9PAFaR84sBJpI0ilJmmwsAJp8IUmaLACaR9mJmn8hSdgGKUnaQQsufXQ8wYm\nkBhp4BgsCPXwEqUmaVBJ8PACSfCFJqXmkAJp4GYmkNFIqQCF4IXhheJoSDjl4EiK\n5eGF07AKaEn/aQFIqQDl04XRhdVohdCF1GiF4IbhmBjl4pAESf9p/oXShOJm0zjl\n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\ng39dzLX8Fxf1A/sDYvr6ww==`\n","import { toHex, MODE } from \"./utility\"\nimport { memGet, memSet } from \"./memory\"\n// var startTime = performance.now()\n\nexport let s6502: STATE6502 = {\n  PStatus: 0,\n  PC: 0,\n  Accum: 0,\n  XReg: 0,\n  YReg: 0,\n  StackPtr: 0\n}\n\nexport const setX = (value: number) => {\n  s6502.XReg = value\n}\n\nexport const setY = (value: number) => {\n  s6502.YReg = value\n}\n\nexport let cycleCount = 0\n\nexport const setCycleCount = (cycles: number) => { cycleCount = cycles }\n\nexport const set6502State = (new6502: any) => {\n  s6502 = new6502\n}\n\nexport const reset6502 = () => {\n  s6502.Accum = 0\n  s6502.XReg = 0\n  s6502.YReg = 0\n  s6502.PStatus = 0b00100100  // bit 2 (Interrupt) + bit 5 (unused)\n  s6502.StackPtr = 0xFF\n  setPC(memGet(0xFFFD) * 256 + memGet(0xFFFC))\n}\n\nexport const incrementPC = (value: number) => {\n  setPC((s6502.PC + value + 65536) % 65536)\n}\n\nexport const setPC = (value: number) => {\n  s6502.PC = value\n}\n\nconst setPStatus = (value: number) => {\n  s6502.PStatus = value | 0b00110000\n}\n\nexport const stack = new Array<string>(256).fill('')\n\nconst pushStack = (call: string, value: number) => {\n  stack[s6502.StackPtr] = call\n  memSet(0x100 + s6502.StackPtr, value)\n  s6502.StackPtr = (s6502.StackPtr + 255) % 256\n}\n\nconst popStack = () => {\n  s6502.StackPtr = (s6502.StackPtr + 1) % 256;\n  const value = memGet(0x100 + s6502.StackPtr);\n  if (isNaN(value)) {\n    throw new Error(\"illegal stack value\");\n  }\n  return value\n}\n\nexport const isCarry = () => { return ((s6502.PStatus & 0x01) !== 0); }\nexport const setCarry = (set = true) => s6502.PStatus = set ? s6502.PStatus | 1 :\n  s6502.PStatus & 0b11111110\n\nconst isZero = () => { return ((s6502.PStatus & 0x02) !== 0); }\nconst setZero = (set = true) => s6502.PStatus = set ? s6502.PStatus | 2 :\n  s6502.PStatus & 0b11111101\n\nconst isInterruptDisabled = () => { return ((s6502.PStatus & 0x04) !== 0); }\nexport const setInterruptDisabled = (set = true) => s6502.PStatus = set ? s6502.PStatus | 4 :\n  s6502.PStatus & 0b11111011\n\nconst isDecimal = () => { return ((s6502.PStatus & 0x08) !== 0); }\nconst BCD = () => (isDecimal() ? 1 : 0)\nconst setDecimal = (set = true) => s6502.PStatus = set ? s6502.PStatus | 8 :\n  s6502.PStatus & 0b11110111\n\nexport const isBreak = () => { return ((s6502.PStatus & 0x10) !== 0); }\nconst setBreak = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x10 :\n  s6502.PStatus & 0b11101111\n\nconst isOverflow = () => { return ((s6502.PStatus & 0x40) !== 0); }\nconst setOverflow = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x40 :\n  s6502.PStatus & 0b10111111\n\nconst isNegative = () => { return ((s6502.PStatus & 0x80) !== 0); }\nconst setNegative = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x80 :\n  s6502.PStatus & 0b01111111\n\nconst checkStatus = (value: number) => {\n  setZero(value === 0);\n  setNegative(value >= 128);\n}\n\n// Return number of clock cycles taken\nexport const doBranch = (takeBranch: boolean, offset: number) => {\n  if (takeBranch) {\n    const oldPC = s6502.PC\n    incrementPC((offset > 127) ? (offset - 256) : offset)\n    return 3 + pageBoundary(oldPC, s6502.PC)\n  }\n  return 2\n}\n\nconst oneByteAdd = (value: number, offset: number) => (value + offset + 256) % 256\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\nconst twoByteAdd = (vLo: number, vHi: number, offset: number) => (vHi*256 + vLo + offset + 65536) % 65536\nconst pageBoundary = (addr1: number, addr2: number) => (((addr1 >> 8) !== (addr2 >> 8)) ? 1 : 0)\n\nexport const pcodes = new Array<PCodeInstr>(256)\n\nconst PCODE = (name: string, mode: MODE, pcode: number, PC: number, code: PCodeFunc) => {\n  console.assert(!pcodes[pcode], \"Duplicate instruction: \" + name + \" mode=\" + mode)\n  pcodes[pcode] = {name: name, pcode: pcode, mode: mode, PC: PC, execute: code}\n}\n\nconst doIndirectYinstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = twoByteAdd(vLo, vHi, s6502.YReg)\n  doInstruction(addr)\n  let cycles = 5 + pageBoundary(addr, address(vLo, vHi))\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\nconst doIndirectInstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = address(vLo, vHi)\n  doInstruction(addr)\n  let cycles = 5\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\n// 300: F8 18 B8 A9 BD 69 00 D8 00\nconst doADC_BCD = (value: number) => {\n  let ones = (s6502.Accum & 0x0F) + (value & 0x0F) + (isCarry() ? 1 : 0)\n  // Handle illegal BCD hex values by wrapping to \"tens\" digit\n  if (ones >= 0xA) {\n    ones += 6\n  }\n  let tmp = (s6502.Accum & 0xF0) + (value & 0xF0) + ones\n  // Pretend we're doing normal addition to set overflow flag\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow((tmp & 0xFF) >= 128 ? bothPositive : bothNegative)\n  // Handle illegal BCD hex values by wrapping to \"hundreds\" digit\n  setCarry(tmp >= 0xA0)\n  if (isCarry()) {\n    tmp += 0x60\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n}\n\nconst doADC_HEX = (value: number) => {\n  let tmp = s6502.Accum + value + (isCarry() ? 1 : 0)\n  setCarry(tmp >= 256)\n  tmp = tmp % 256\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow(tmp >= 128 ? bothPositive : bothNegative)\n  s6502.Accum = tmp\n  checkStatus(s6502.Accum)\n}\n\nconst doADC = (addr: number) => {\n  if (isDecimal()) {\n    doADC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(memGet(addr))\n  }\n}\n\nPCODE('ADC', MODE.IMM, 0x69, 2, (value) => {\n  if (BCD()) {doADC_BCD(value)} else {doADC_HEX(value)}; return 2 + BCD()})\nPCODE('ADC', MODE.ZP_REL, 0x65, 2, (vZP) => {doADC(vZP); return 3 + BCD()})\nPCODE('ADC', MODE.ZP_X, 0x75, 2, (vZP) =>\n  {doADC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS, 0x6D, 3, (vLo, vHi) =>\n  {doADC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS_X, 0x7D, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.ABS_Y, 0x79, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.IND_X, 0x61, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doADC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('ADC', MODE.IND_Y, 0x71, 2, (vZP) => doIndirectYinstruction(vZP, doADC, true))\nPCODE('ADC', MODE.IND, 0x72, 2, (vZP) => doIndirectInstruction(vZP, doADC, true))\n\nconst doAND = (addr: number) => {\n  s6502.Accum &= memGet(addr)\n  checkStatus(s6502.Accum)}\nPCODE('AND', MODE.IMM, 0x29, 2, (value) => {s6502.Accum &= value; checkStatus(s6502.Accum); return 2})\nPCODE('AND', MODE.ZP_REL, 0x25, 2, (vZP) => {doAND(vZP); return 3})\nPCODE('AND', MODE.ZP_X, 0x35, 2, (vZP) => {doAND(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('AND', MODE.ABS, 0x2D, 3, (vLo, vHi) => {doAND(address(vLo, vHi)); return 4})\nPCODE('AND', MODE.ABS_X, 0x3D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.ABS_Y, 0x39, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.IND_X, 0x21, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doAND(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('AND', MODE.IND_Y, 0x31, 2, (vZP) => doIndirectYinstruction(vZP, doAND, false))\nPCODE('AND', MODE.IND, 0x32, 2, (vZP) => doIndirectInstruction(vZP, doAND, false))\n\nconst doASL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 128) === 128)\n  v = (v << 1) % 256\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ASL', MODE.IMPLIED, 0x0A, 1, () => {setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = (s6502.Accum << 1) % 256; checkStatus(s6502.Accum); return 2})\nPCODE('ASL', MODE.ZP_REL, 0x06, 2, (vZP) => {doASL(vZP); return 5})\nPCODE('ASL', MODE.ZP_X, 0x16, 2, (vZP) => {doASL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ASL', MODE.ABS, 0x0E, 3, (vLo, vHi) => {doASL(address(vLo, vHi)); return 6})\nPCODE('ASL', MODE.ABS_X, 0x1E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doASL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BCC', MODE.ZP_REL, 0x90, 2, (value) => doBranch(!isCarry(), value))\nPCODE('BCS', MODE.ZP_REL, 0xB0, 2, (value) => doBranch(isCarry(), value))\nPCODE('BEQ', MODE.ZP_REL, 0xF0, 2, (value) => doBranch(isZero(), value))\nPCODE('BMI', MODE.ZP_REL, 0x30, 2, (value) => doBranch(isNegative(), value))\nPCODE('BNE', MODE.ZP_REL, 0xD0, 2, (value) => doBranch(!isZero(), value))\nPCODE('BPL', MODE.ZP_REL, 0x10, 2, (value) => doBranch(!isNegative(), value))\nPCODE('BVC', MODE.ZP_REL, 0x50, 2, (value) => doBranch(!isOverflow(), value))\nPCODE('BVS', MODE.ZP_REL, 0x70, 2, (value) => doBranch(isOverflow(), value))\nPCODE('BRA', MODE.ZP_REL, 0x80, 2, (value) => doBranch(true, value))\n\nconst doBit = (value: number) => {\n  setZero((s6502.Accum & value) === 0);\n  setNegative((value & 0b10000000) !== 0);\n  setOverflow((value & 0b01000000) !== 0);\n}\nPCODE('BIT', MODE.ZP_REL, 0x24, 2, (vZP) => {doBit(memGet(vZP)); return 3})\nPCODE('BIT', MODE.ABS, 0x2C, 3, (vLo, vHi) => {doBit(memGet(address(vLo, vHi))); return 4})\nPCODE('BIT', MODE.IMM, 0x89, 2, (value) => {doBit(value); return 2})\nPCODE('BIT', MODE.ZP_X, 0x34, 2, (vZP) => {doBit(memGet(oneByteAdd(vZP, s6502.XReg))); return 4})\nPCODE('BIT', MODE.ABS_X, 0x3C, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doBit(memGet(addr)); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doInterrupt = (name: string, addr: number, pcOffset = 0) => {\n  // I don't think the real Apple IIe switches back to main ROM $C300\n  // Comment these out and see if we run into problems\n  // memSet(0xC006, 0)  // slot ROM $C100-$CFFF\n  // memSet(0xC00A, 0)  // main ROM $C300-$C3FF\n  const PCreturn = (s6502.PC + pcOffset) % 65536\n  const vLo = memGet(addr)\n  const vHi = memGet(addr + 1)\n  pushStack(`${name} $` + toHex(vHi) + toHex(vLo), Math.trunc(PCreturn / 256))\n  pushStack(name, PCreturn % 256)\n  pushStack(\"P\", s6502.PStatus)\n  setDecimal(false)  // 65c02 only\n  setInterruptDisabled()\n  // Since we're in the middle of the BRK, set our new program counter to\n  // be one less than our vector address. Don't do this for IRQ and NMI.\n  setPC(twoByteAdd(vLo, vHi, name === \"BRK\" ? -1 : 0));\n}\nconst doBrk = () => {\n  setBreak()\n  doInterrupt(\"BRK\", 0xFFFE, 2)\n  return 7\n}\nPCODE('BRK', MODE.IMPLIED, 0x00, 1, doBrk)\n\nexport const doInterruptRequest = (): number => {\n  if (isInterruptDisabled()) return 0\n  setBreak(false)\n  doInterrupt(\"IRQ\", 0xFFFE)\n  return 7\n}\n\nexport const doNonMaskableInterrupt = (): number => {\n  setBreak(false)\n  doInterrupt(\"NMI\", 0xFFFA)\n  return 7\n}\n\nPCODE('CLC', MODE.IMPLIED, 0x18, 1, () => {setCarry(false); return 2})\nPCODE('CLD', MODE.IMPLIED, 0xD8, 1, () => {setDecimal(false); return 2})\nPCODE('CLI', MODE.IMPLIED, 0x58, 1, () => {setInterruptDisabled(false); return 2})\nPCODE('CLV', MODE.IMPLIED, 0xB8, 1, () => {setOverflow(false); return 2})\n\nconst doCMP = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nconst doCMP1 = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nPCODE('CMP', MODE.IMM, 0xC9, 2, (value) => {setCarry(s6502.Accum >= value);\n  checkStatus((s6502.Accum - value + 256) % 256); return 2})\nPCODE('CMP', MODE.ZP_REL, 0xC5, 2, (vZP) => {doCMP(vZP); return 3})\nPCODE('CMP', MODE.ZP_X, 0xD5, 2, (vZP) => {doCMP(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('CMP', MODE.ABS, 0xCD, 3, (vLo, vHi) => {doCMP(address(vLo, vHi)); return 4})\nPCODE('CMP', MODE.ABS_X, 0xDD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doCMP1(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.ABS_Y, 0xD9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doCMP(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.IND_X, 0xC1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doCMP(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('CMP', MODE.IND_Y, 0xD1, 2, (vZP) => doIndirectYinstruction(vZP, doCMP, false))\nPCODE('CMP', MODE.IND, 0xD2, 2, (vZP) => doIndirectInstruction(vZP, doCMP, false))\n\nconst doCPX = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.XReg >= value)\n  checkStatus((s6502.XReg - value + 256) % 256)\n}\nPCODE('CPX', MODE.IMM, 0xE0, 2, (value) => {setCarry(s6502.XReg >= value);\n  checkStatus((s6502.XReg - value + 256) % 256); return 2})\nPCODE('CPX', MODE.ZP_REL, 0xE4, 2, (vZP) => {doCPX(vZP); return 3})\nPCODE('CPX', MODE.ABS, 0xEC, 3, (vLo, vHi) => {doCPX(address(vLo, vHi)); return 4})\n\nconst doCPY = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.YReg >= value)\n  checkStatus((s6502.YReg - value + 256) % 256)\n}\nPCODE('CPY', MODE.IMM, 0xC0, 2, (value) => {setCarry(s6502.YReg >= value);\n  checkStatus((s6502.YReg - value + 256) % 256); return 2})\nPCODE('CPY', MODE.ZP_REL, 0xC4, 2, (vZP) => {doCPY(vZP); return 3})\nPCODE('CPY', MODE.ABS, 0xCC, 3, (vLo, vHi) => {doCPY(address(vLo, vHi)); return 4})\n\nconst doDEC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), -1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('DEC', MODE.IMPLIED, 0x3A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, -1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('DEC', MODE.ZP_REL, 0xC6, 2, (vZP) => {doDEC(vZP); return 5})\nPCODE('DEC', MODE.ZP_X, 0xD6, 2, (vZP) => {doDEC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('DEC', MODE.ABS, 0xCE, 3, (vLo, vHi) => {doDEC(address(vLo, vHi)); return 6})\nPCODE('DEC', MODE.ABS_X, 0xDE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doDEC(addr)\n  return 7})\n\nPCODE('DEX', MODE.IMPLIED, 0xCA, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, -1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('DEY', MODE.IMPLIED, 0x88, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, -1);\n  checkStatus(s6502.YReg); return 2})\n\nconst doEOR = (addr: number) => {\n  s6502.Accum ^= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('EOR', MODE.IMM, 0x49, 2, (value) => {s6502.Accum ^= value; checkStatus(s6502.Accum); return 2})\nPCODE('EOR', MODE.ZP_REL, 0x45, 2, (vZP) => {doEOR(vZP); return 3})\nPCODE('EOR', MODE.ZP_X, 0x55, 2, (vZP) => {doEOR(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('EOR', MODE.ABS, 0x4D, 3, (vLo, vHi) => {doEOR(address(vLo, vHi)); return 4})\nPCODE('EOR', MODE.ABS_X, 0x5D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.ABS_Y, 0x59, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.IND_X, 0x41, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doEOR(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('EOR', MODE.IND_Y, 0x51, 2, (vZP) => doIndirectYinstruction(vZP, doEOR, false))\nPCODE('EOR', MODE.IND, 0x52, 2, (vZP) => doIndirectInstruction(vZP, doEOR, false))\n\nconst doINC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), 1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('INC', MODE.IMPLIED, 0x1A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, 1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('INC', MODE.ZP_REL, 0xE6, 2, (vZP) => {doINC(vZP); return 5})\nPCODE('INC', MODE.ZP_X, 0xF6, 2, (vZP) => {doINC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('INC', MODE.ABS, 0xEE, 3, (vLo, vHi) => {doINC(address(vLo, vHi)); return 6})\nPCODE('INC', MODE.ABS_X, 0xFE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doINC(addr)\n  return 7})\n\nPCODE('INX', MODE.IMPLIED, 0xE8, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, 1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('INY', MODE.IMPLIED, 0xC8, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, 1);\n  checkStatus(s6502.YReg); return 2})\n\nPCODE('JMP', MODE.ABS, 0x4C, 3, (vLo, vHi) => {setPC(twoByteAdd(vLo, vHi, -3)); return 3})\n// 65c02 - this fixes the 6502 indirect JMP bug across page boundaries\nPCODE('JMP', MODE.IND, 0x6C, 3, (vLo, vHi) => {const a = address(vLo, vHi);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\nPCODE('JMP', MODE.IND_X, 0x7C, 3, (vLo, vHi) => {const a = twoByteAdd(vLo, vHi, s6502.XReg);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nPCODE('JSR', MODE.ABS, 0x20, 3, (vLo, vHi) => {\n  // Push the (address - 1) of the next instruction\n  const PC2 = (s6502.PC + 2) % 65536\n  pushStack(\"JSR $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256));\n  pushStack(\"JSR\", PC2 % 256);\n  setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nconst doLDA = (addr: number) => {\n  s6502.Accum = memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('LDA', MODE.IMM, 0xA9, 2, (value) => {s6502.Accum = value; checkStatus(s6502.Accum); return 2})\nPCODE('LDA', MODE.ZP_REL, 0xA5, 2, (vZP) => {doLDA(vZP); return 3})\nPCODE('LDA', MODE.ZP_X, 0xB5, 2, (vZP) => {doLDA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDA', MODE.ABS, 0xAD, 3, (vLo, vHi) => {doLDA(address(vLo, vHi)); return 4})\nPCODE('LDA', MODE.ABS_X, 0xBD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.ABS_Y, 0xB9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.IND_X, 0xA1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doLDA(address(memGet(vZP), memGet((vZP + 1) % 256))); return 6})\nPCODE('LDA', MODE.IND_Y, 0xB1, 2, (vZP) => doIndirectYinstruction(vZP, doLDA, false))\nPCODE('LDA', MODE.IND, 0xB2, 2, (vZP) => doIndirectInstruction(vZP, doLDA, false))\n\nconst doLDX = (addr: number) => {\n  s6502.XReg = memGet(addr)\n  checkStatus(s6502.XReg)\n}\nPCODE('LDX', MODE.IMM, 0xA2, 2, (value) => {s6502.XReg = value; checkStatus(s6502.XReg); return 2})\nPCODE('LDX', MODE.ZP_REL, 0xA6, 2, (vZP) => {doLDX(vZP); return 3})\nPCODE('LDX', MODE.ZP_Y, 0xB6, 2, (vZP) => {doLDX(oneByteAdd(vZP, s6502.YReg)); return 4})\nPCODE('LDX', MODE.ABS, 0xAE, 3, (vLo, vHi) => {doLDX(address(vLo, vHi)); return 4})\nPCODE('LDX', MODE.ABS_Y, 0xBE, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDX(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLDY = (addr: number) => {\n  s6502.YReg = memGet(addr)\n  checkStatus(s6502.YReg)\n}\nPCODE('LDY', MODE.IMM, 0xA0, 2, (value) => {s6502.YReg = value; checkStatus(s6502.YReg); return 2})\nPCODE('LDY', MODE.ZP_REL, 0xA4, 2, (vZP) => {doLDY(vZP); return 3})\nPCODE('LDY', MODE.ZP_X, 0xB4, 2, (vZP) => {doLDY(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDY', MODE.ABS, 0xAC, 3, (vLo, vHi) => {doLDY(address(vLo, vHi)); return 4})\nPCODE('LDY', MODE.ABS_X, 0xBC, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDY(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLSR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 1) === 1)\n  v >>= 1\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('LSR', MODE.IMPLIED, 0x4A, 1, () => {setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum >>= 1; checkStatus(s6502.Accum); return 2})\nPCODE('LSR', MODE.ZP_REL, 0x46, 2, (vZP) => {doLSR(vZP); return 5})\nPCODE('LSR', MODE.ZP_X, 0x56, 2, (vZP) => {doLSR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('LSR', MODE.ABS, 0x4E, 3, (vLo, vHi) => {doLSR(address(vLo, vHi)); return 6})\nPCODE('LSR', MODE.ABS_X, 0x5E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLSR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('NOP', MODE.IMPLIED, 0xEA, 1, () => {return 2})\n\nconst doORA = (addr: number) => {\n  s6502.Accum |= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('ORA', MODE.IMM, 0x09, 2, (value) => {s6502.Accum |= value; checkStatus(s6502.Accum); return 2})\nPCODE('ORA', MODE.ZP_REL, 0x05, 2, (vZP) => {doORA(vZP); return 3})\nPCODE('ORA', MODE.ZP_X, 0x15, 2, (vZP) => {doORA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('ORA', MODE.ABS, 0x0D, 3, (vLo, vHi) => {doORA(address(vLo, vHi)); return 4})\nPCODE('ORA', MODE.ABS_X, 0x1D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.ABS_Y, 0x19, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.IND_X, 0x01, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doORA(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('ORA', MODE.IND_Y, 0x11, 2, (vZP) => doIndirectYinstruction(vZP, doORA, false))\nPCODE('ORA', MODE.IND, 0x12, 2, (vZP) => doIndirectInstruction(vZP, doORA, false))\n\nPCODE('PHA', MODE.IMPLIED, 0x48, 1, () => {pushStack(\"PHA\", s6502.Accum); return 3})\nPCODE('PHP', MODE.IMPLIED, 0x08, 1, () => {pushStack(\"PHP\", s6502.PStatus | 0x10); return 3})\nPCODE('PHX', MODE.IMPLIED, 0xDA, 1, () => {pushStack(\"PHX\", s6502.XReg); return 3})\nPCODE('PHY', MODE.IMPLIED, 0x5A, 1, () => {pushStack(\"PHY\", s6502.YReg); return 3})\nPCODE('PLA', MODE.IMPLIED, 0x68, 1, () => {s6502.Accum = popStack(); checkStatus(s6502.Accum); return 4})\nPCODE('PLP', MODE.IMPLIED, 0x28, 1, () => {setPStatus(popStack()); return 4})\nPCODE('PLX', MODE.IMPLIED, 0xFA, 1, () => {s6502.XReg = popStack(); checkStatus(s6502.XReg); return 4})\nPCODE('PLY', MODE.IMPLIED, 0x7A, 1, () => {s6502.YReg = popStack(); checkStatus(s6502.YReg); return 4})\n\nconst doROL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit0 = isCarry() ? 1 : 0;\n  setCarry((v & 128) === 128)\n  v = ((v << 1) % 256) | bit0\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROL', MODE.IMPLIED, 0x2A, 1, () => {const bit0 = isCarry() ? 1 : 0;\n  setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = ((s6502.Accum << 1) % 256) | bit0; checkStatus(s6502.Accum); return 2})\nPCODE('ROL', MODE.ZP_REL, 0x26, 2, (vZP) => {doROL(vZP); return 5})\nPCODE('ROL', MODE.ZP_X, 0x36, 2, (vZP) => {doROL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROL', MODE.ABS, 0x2E, 3, (vLo, vHi) => {doROL(address(vLo, vHi)); return 6})\nPCODE('ROL', MODE.ABS_X, 0x3E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doROR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit7 = isCarry() ? 128 : 0;\n  setCarry((v & 1) === 1)\n  v = (v >> 1) | bit7\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROR', MODE.IMPLIED, 0x6A, 1, () => {const bit7 = isCarry() ? 128 : 0;\n  setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum = (s6502.Accum >> 1) | bit7; checkStatus(s6502.Accum); return 2})\nPCODE('ROR', MODE.ZP_REL, 0x66, 2, (vZP) => {doROR(vZP); return 5})\nPCODE('ROR', MODE.ZP_X, 0x76, 2, (vZP) => {doROR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROR', MODE.ABS, 0x6E, 3, (vLo, vHi) => {doROR(address(vLo, vHi)); return 6})\nPCODE('ROR', MODE.ABS_X, 0x7E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('RTI', MODE.IMPLIED, 0x40, 1, () => {\n  setPStatus(popStack())\n  // We don't really care what the break bit is set to, since it will only\n  // get looked at after a BRK/IRQ, which will set it automatically.\n  setBreak(false)\n  setPC(address(popStack(), popStack()) - 1); return 6})\n\nPCODE('RTS', MODE.IMPLIED, 0x60, 1, () => {setPC(address(popStack(), popStack())); return 6})\n\n// 300: F8 38 B8 A9 00 E9 00 D8 00\nconst doSBC_BCD = (value: number) => {\n  // On 65c02, do normal hex subtraction to set the carry & overflow flags.\n  const vtmp = 255 - value\n  let tmp = s6502.Accum + vtmp + (isCarry() ? 1 : 0)\n  const newCarry = (tmp >= 256)\n  const bothPositive = (s6502.Accum <= 127 && vtmp <= 127)\n  const bothNegative = (s6502.Accum >= 128 && vtmp >= 128)\n  setOverflow((tmp % 256) >= 128 ? bothPositive : bothNegative)\n\n  let ones = (s6502.Accum & 0x0F) - (value & 0x0F) + (isCarry() ? 0 : -1)\n  tmp = s6502.Accum - value + (isCarry() ? 0 : -1)\n  if (tmp < 0) {\n    tmp -= 0x60\n  }\n  if (ones < 0) {\n    tmp -= 0x06\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n  setCarry(newCarry)\n}\n\nconst doSBC = (addr: number) => {\n  if (BCD()) {\n    doSBC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(255 - memGet(addr))\n  }\n}\n\nPCODE('SBC', MODE.IMM, 0xE9, 2, (value) => {\n  if (BCD()) {doSBC_BCD(value)} else {doADC_HEX(255 - value)}\n  return 2 + BCD()})\nPCODE('SBC', MODE.ZP_REL, 0xE5, 2, (vZP) =>\n  {doSBC(vZP); return 3 + BCD()})\nPCODE('SBC', MODE.ZP_X, 0xF5, 2, (vZP) =>\n  {doSBC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS, 0xED, 3, (vLo, vHi) =>\n  {doSBC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS_X, 0xFD, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.ABS_Y, 0xF9, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.IND_X, 0xE1, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doSBC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('SBC', MODE.IND_Y, 0xF1, 2, (vZP) =>\n  doIndirectYinstruction(vZP, doSBC, true))\nPCODE('SBC', MODE.IND, 0xF2, 2, (vZP) =>\n  doIndirectInstruction(vZP, doSBC, true))\n\nPCODE('SEC', MODE.IMPLIED, 0x38, 1, () => {setCarry(); return 2})\nPCODE('SED', MODE.IMPLIED, 0xF8, 1, () => {setDecimal(); return 2})\nPCODE('SEI', MODE.IMPLIED, 0x78, 1, () => {setInterruptDisabled(); return 2})\n\n// Zero Page     STA $44       $85  2   3\n// Zero Page,X   STA $44,X     $95  2   4\n// Absolute      STA $4400     $8D  3   4\n// Absolute,X    STA $4400,X   $9D  3   5\n// Absolute,Y    STA $4400,Y   $99  3   5\n// Indirect,X    STA ($44,X)   $81  2   6\n// Indirect,Y    STA ($44),Y   $91  2   6\nPCODE('STA', MODE.ZP_REL, 0x85, 2, (vZP) => {memSet(vZP, s6502.Accum); return 3})\nPCODE('STA', MODE.ZP_X, 0x95, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS, 0x8D, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS_X, 0x9D, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, s6502.Accum)\n  return 5})\nPCODE('STA', MODE.ABS_Y, 0x99, 3, (vLo, vHi) => {memSet(twoByteAdd(vLo, vHi, s6502.YReg), s6502.Accum); return 5})\nPCODE('STA', MODE.IND_X, 0x81, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  memSet(address(memGet(vZP), memGet(vZP + 1)), s6502.Accum); return 6})\nconst doSTA = (addr: number) => {\n  memSet(addr, s6502.Accum)\n}\n// STA ($FF),Y take 6 cycles, doesn't depend upon page boundary\nPCODE('STA', MODE.IND_Y, 0x91, 2, (vZP) => {doIndirectYinstruction(vZP, doSTA, false); return 6})\nPCODE('STA', MODE.IND, 0x92, 2, (vZP) => doIndirectInstruction(vZP, doSTA, false))\n\nPCODE('STX', MODE.ZP_REL, 0x86, 2, (vZP) => {memSet(vZP, s6502.XReg); return 3})\nPCODE('STX', MODE.ZP_Y, 0x96, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.YReg), s6502.XReg); return 4})\nPCODE('STX', MODE.ABS, 0x8E, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.XReg); return 4})\n\nPCODE('STY', MODE.ZP_REL, 0x84, 2, (vZP) => {memSet(vZP, s6502.YReg); return 3})\nPCODE('STY', MODE.ZP_X, 0x94, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.YReg); return 4})\nPCODE('STY', MODE.ABS, 0x8C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.YReg); return 4})\n\nPCODE('STZ', MODE.ZP_REL, 0x64, 2, (vZP) => {memSet(vZP, 0); return 3})\nPCODE('STZ', MODE.ZP_X, 0x74, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), 0); return 4})\nPCODE('STZ', MODE.ABS, 0x9C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), 0); return 4})\nPCODE('STZ', MODE.ABS_X, 0x9E, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, 0)\n  return 5})\n\nPCODE('TAX', MODE.IMPLIED, 0xAA, 1, () => {s6502.XReg = s6502.Accum; checkStatus(s6502.XReg); return 2})\nPCODE('TAY', MODE.IMPLIED, 0xA8, 1, () => {s6502.YReg = s6502.Accum; checkStatus(s6502.YReg); return 2})\nPCODE('TSX', MODE.IMPLIED, 0xBA, 1, () => {s6502.XReg = s6502.StackPtr; checkStatus(s6502.XReg); return 2})\nPCODE('TXA', MODE.IMPLIED, 0x8A, 1, () => {s6502.Accum = s6502.XReg; checkStatus(s6502.Accum); return 2})\nPCODE('TXS', MODE.IMPLIED, 0x9A, 1, () => {s6502.StackPtr = s6502.XReg; return 2})\nPCODE('TYA', MODE.IMPLIED, 0x98, 1, () => {s6502.Accum = s6502.YReg; checkStatus(s6502.Accum); return 2})\n\n// Undocumented 65c02 NOP's\n// http://www.6502.org/tutorials/65c02opcodes.html\n//       x2:     x3:     x4:     x7:     xB:     xC:     xF:\n//      -----   -----   -----   -----   -----   -----   -----\n// 0x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 1x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 2x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 3x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 4x:  2 2 .   1 1 .   2 3 g   1 1 a   1 1 .   . . .   1 1 c\n// 5x:  . . .   1 1 .   2 4 h   1 1 a   1 1 .   3 8 j   1 1 c\n// 6x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 7x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 8x:  2 2 .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// 9x:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Ax:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Bx:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Cx:  2 2 .   1 1 .   . . .   1 1 b   1 1 e   . . .   1 1 d\n// Dx:  . . .   1 1 .   2 4 h   1 1 b   1 1 f   3 4 i   1 1 d\n// Ex:  2 2 .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Fx:  . . .   1 1 .   2 4 h   1 1 b   1 1 .   3 4 i   1 1 d\nconst twoByteNops = [0x02, 0x22, 0x42, 0x62, 0x82, 0xC2, 0xE2]\ntwoByteNops.forEach(instr => {\n  PCODE('NOPX', MODE.IMPLIED, instr, 2, () => {return 2})\n});\nfor (let i = 0; i <= 15; i++) {\n  PCODE('NOPX', MODE.IMPLIED, 3 + 16 * i, 1, () => {return 1})\n  PCODE('NOPX', MODE.IMPLIED, 7 + 16 * i, 1, () => {return 1})\n  PCODE('NOPX', MODE.IMPLIED, 0xB + 16 * i, 1, () => {return 1})  \n  PCODE('NOPX', MODE.IMPLIED, 0xF + 16 * i, 1, () => {return 1})  \n}\nPCODE('NOPX', MODE.IMPLIED, 0x44, 2, () => {return 3})\nPCODE('NOPX', MODE.IMPLIED, 0x54, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xD4, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xF4, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0x5C, 3, () => {return 8})\nPCODE('NOPX', MODE.IMPLIED, 0xDC, 3, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xFC, 3, () => {return 4})\n\n// Fill the rest of the 65c02 with BRK instructions. This avoids needing\n// to do a check in processInstruction, and also breaks on a bad op code.\n// Turns out there are only 4 of these: 0x04, 0x0C, 0x14, 0x1C\nfor (let i = 0; i < 256; i++) {\n  if (!pcodes[i]) {\n    PCODE('BRK', MODE.IMPLIED, i, 1, doBrk)\n  }\n}\n","// Code converted from the C code library available at:\n// https://github.com/mr-stivo/dsk2woz2\n//\nimport { toASCII, uint16toBytes, uint32toBytes } from \"./utility\"\n\n/**\n  Appends a byte to a woz at a supplied position: number, returning the\n  position immediately after the byte.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to write.\n  @returns The position immediately after the byte.\n*/\nconst write_byte = (woz: Uint8Array, position: number, value: number) => {\n  const shift = position & 7\n  const byte_position = position >>> 3\n  woz[byte_position] |= value >>> shift\n  if (shift) woz[byte_position+1] |= value << (8 - shift)\n  return position + 8;\n}\n\n/**\n  Encodes a byte into Apple 4-and-4 format and appends it to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to encode and write.\n  @returns The position immediately after the encoded byte.\n*/\nconst write_4_and_4 = (woz: Uint8Array, position: number, value: number) => {\n  position = write_byte(woz, position, (value >>> 1) | 0xAA);\n  position = write_byte(woz, position, value | 0xAA);\n  return position;\n}\n\n/**\n  Appends a 6-and-2-style 10-bit sync word to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @returns The position immediately after the sync word.\n*/\nconst write_sync = (woz: Uint8Array, position: number) => {\n  position = write_byte(woz, position, 0xFF);\n  // Skip two bits, i.e. leave them as 0s\n  return position + 2\n}\n\n/*!\n  Converts a 256-byte source woz into the 343 byte values that\n  contain the Apple 6-and-2 encoding of that woz.\n  @param dest The at-least-343 byte woz to which the encoded sector is written.\n  @param src The 256-byte source data.\n*/\nconst encode_6_and_2 = (src: Uint8Array) => {\n  const six_and_two_mapping = [\n    0x96, 0x97, 0x9A, 0x9B, 0x9D, 0x9E, 0x9F, 0xA6,\n    0xA7, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB2, 0xB3,\n    0xB4, 0xB5, 0xB6, 0xB7, 0xB9, 0xBA, 0xBB, 0xBC,\n    0xBD, 0xBE, 0xBF, 0xCB, 0xCD, 0xCE, 0xCF, 0xD3,\n    0xD6, 0xD7, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE,\n    0xDF, 0xE5, 0xE6, 0xE7, 0xE9, 0xEA, 0xEB, 0xEC,\n    0xED, 0xEE, 0xEF, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6,\n    0xF7, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n  ];\n\n  const dest = new Uint8Array(343)\n\n  // Fill in byte values: the first 86 bytes contain shuffled\n  // and combined copies of the bottom two bits of the sector\n  // contents; the 256 bytes afterwards are the remaining\n  // six bits.\n  const bit_reverse = [0, 2, 1, 3];\n  for (let c = 0; c < 84; c++) {\n    dest[c] =\n      bit_reverse[src[c] & 3] |\n      (bit_reverse[src[c + 86] & 3] << 2) |\n      (bit_reverse[src[c + 172] & 3] << 4);\n  }\n  dest[84] =\n    (bit_reverse[src[84] & 3] << 0) |\n    (bit_reverse[src[170] & 3] << 2);\n  dest[85] =\n      (bit_reverse[src[85] & 3] << 0) |\n      (bit_reverse[src[171] & 3] << 2);\n\n  for (let c = 0; c < 256; c++) {\n    dest[86 + c] = src[c] >>> 2;\n  }\n\n  // Exclusive OR each byte with the one before it.\n  dest[342] = dest[341];\n  let location = 342;\n  while(location > 1) {\n    location--;\n    dest[location] ^= dest[location - 1];\n  }\n\n  // Map six-bit values up to full bytes.\n  for (let c = 0; c < 343; c++) {\n    dest[c] = six_and_two_mapping[dest[c]];\n  }\n  return dest\n}\n\n/*!\n  Converts a DSK-style track to a WOZ-style track.\n  @param dest The 6646-byte woz that will contain the WOZ track. Both track contents and the\n      proper suffix will be written.\n  @param src The 4096-byte woz that contains the DSK track — 16 instances of 256 bytes, each\n      a fully-decoded sector.\n  @param track_number The track number to encode into this track.\n  @param is_prodos @c true if the DSK image is in Pro-DOS order; @c false if it is in DOS 3.3 order.\n*/\nconst serialise_track = (src: Uint8Array, track_number: number, is_prodos: boolean) => {\n  let track_position = 0;    // This is the track position **in bits**.\n  const dest = new Uint8Array(6646).fill(0)\n\n  // Write gap 1.\n  for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n  }\n\n  // Step through the sectors in physical order.\n  for (let sector = 0; sector < 16; sector++) {\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0x96);\n    // Volume, track, setor and checksum, all in 4-and-4 format.\n    track_position = write_4_and_4(dest, track_position, 254);\n    track_position = write_4_and_4(dest, track_position, track_number);\n    track_position = write_4_and_4(dest, track_position, sector);\n    track_position = write_4_and_4(dest, track_position, 254 ^ track_number ^ sector);\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 2.\n    for (let c = 0; c < 7; c++) {\n        track_position = write_sync(dest, track_position);\n    }\n\n    // Write the sector body.\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xAD);\n\n    // Map from this physical sector to a logical sector.\n    const ls = (sector === 15) ? 15 : ((sector * (is_prodos ? 8 : 7)) % 15);\n\n    // Sector contents.\n    const contents = encode_6_and_2(src.slice(ls * 256, ls * 256 + 256));\n    for (let c = 0; c < contents.length; c++) {\n      track_position = write_byte(dest, track_position, contents[c]);            \n    }\n\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 3.\n    for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n    }\n  }\n  return dest\n}\n\nexport const convertdsk2woz = (dskData: Uint8Array, isPO: boolean) => {\n  if (dskData.length !== 35 * 16 * 256) {\n    return new Uint8Array()\n  }\n  const woz = new Uint8Array(512*3 + 512*35*13).fill(0)\n  woz.set(toASCII(\"WOZ2\\xFF\\n\\r\\n\"), 0)\n  woz.set(toASCII(\"INFO\"), 12)\n  woz[16] = 60    // Chunk size\n  woz[20] = 2     // INFO version: 2\n  woz[21] = 1     // Disk type: 5.25\"\n  woz[22] = 0     // Write protection: disabled\n  woz[23] = 0     // Cross-track synchronised image: no\n  woz[24] = 1     // MC3470 fake bits have been removed: yes\n  woz.fill(32, 25, 57)\n  woz.set(toASCII(\"Apple2TS (CT6502)\"), 25)\n  woz[57] = 1     // Disk sides: 1\n  woz[58] = 0     // Boot sector format: 0 (unknown)\n  woz[59] = 32    // Optimal bit timing: 32 (4us)\n  woz[60] = 0     // Compatible hardware: 0 (unknown)\n  woz[62] = 0     // Required RAM: 0 (unknown)\n  woz[64] = 13    // Largest track blocks (512 bytes): 13 (default track size)\n  woz.set(toASCII(\"TMAP\"), 80)\n  woz[84] = 160    // Chunk size\n  woz.fill(0xFF, 88, 88 + 160)  // Fill the TMAP with empty tracks\n  // Now fill in the quarter tracks around each whole track\n  let offset = 0;\n  for (let c = 0; c < 35; c++) {\n    offset = 88 + (c << 2)\n    if (c > 0) woz[offset - 1] = c\n    woz[offset] = woz[offset + 1] = c\n  }\n  woz.set(toASCII(\"TRKS\"), 248)\n  woz.set(uint32toBytes(1280 + 35*13*512), 252)\n  for (let c = 0; c < 35; c++) {\n    offset = 256 + (c << 3);\n    woz.set(uint16toBytes(3 + c*13), offset)  // start block\n    woz[offset + 2] = 13   // block count\n    woz.set(uint32toBytes(50304), offset + 4)  // start block\n    const trackInput = dskData.slice(c * 16 * 256, (c + 1) * 16 * 256)\n    const trackData = serialise_track(trackInput, c, isPO)\n    offset = 512 * (3 + 13 * c)\n    woz.set(trackData, offset)\n  }\n  return woz\n}\n","import { convertdsk2woz } from \"./convertdsk2woz\"\nimport { crc32, replaceSuffix } from \"./utility\";\n\nconst decodeWoz2 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz2 = [0x57, 0x4F, 0x5A, 0x32, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz2 = woz2.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz2) return false\n  driveState.isWriteProtected = diskData[22] === 1\n  const crc = diskData.slice(8, 12)\n  const storedCRC = crc[0] + (crc[1] << 8) + (crc[2] << 16) + crc[3] * (2 ** 24)\n  const actualCRC = crc32(diskData, 12)\n  if (storedCRC !== 0 && storedCRC !== actualCRC) {\n    alert(\"CRC checksum error: \" + driveState.filename)\n    return false\n  }\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      const tmap_offset = 256 + 8 * tmap_index\n      const trk = diskData.slice(tmap_offset, tmap_offset + 8)\n      driveState.trackStart[htrack] = 512*(trk[0] + (trk[1] << 8))\n      // const nBlocks = trk[2] + (trk[3] << 8)\n      driveState.trackNbits[htrack] = trk[4] + (trk[5] << 8) + (trk[6] << 16) + trk[7] * (2 ** 24)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n    }\n  }\n  return true\n}\n\nconst decodeWoz1 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz1 = [0x57, 0x4F, 0x5A, 0x31, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz1 = woz1.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz1) {\n    return false\n  }\n  driveState.isWriteProtected = diskData[22] === 1\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      driveState.trackStart[htrack] = 256 + tmap_index * 6656\n      const trk = diskData.slice(driveState.trackStart[htrack] + 6646,\n        driveState.trackStart[htrack] + 6656)\n      driveState.trackNbits[htrack] = trk[2] + (trk[3] << 8)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n    }\n  }\n  return true\n}\n\nconst isDSK = (filename: String) => {\n  const f = filename.toLowerCase()\n  const isDSK = f.endsWith(\".dsk\") || f.endsWith(\".do\")\n  const isPO = f.endsWith(\".po\")\n  return isDSK || isPO\n}\n\nconst decodeDSK = (driveState: DriveState, diskData: Uint8Array) => {\n  let f = driveState.filename.toLowerCase()\n  const isPO = f.endsWith(\".po\")\n  const newData = convertdsk2woz(diskData, isPO)\n  if (newData.length === 0) {\n    return new Uint8Array()\n  }\n  driveState.filename = replaceSuffix(driveState.filename, 'woz')\n  driveState.diskHasChanges = true\n  return newData\n}\n\nconst int32 = (data: Uint8Array) => {\n  return data[0] + 256 * (data[1] + 256 * (data[2] + 256 * data[3]))\n}\n\nconst decode2MG = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n//    const nblocks = int32(diskData.slice(0x14, 0x18))\n  const offset = int32(diskData.slice(0x18, 0x1c))\n  const nbytes = int32(diskData.slice(0x1c, 0x20))\n  let magic = ''\n  for (let i = 0; i < 4; i++) magic += String.fromCharCode(diskData[i]) \n  if (magic !== '2IMG') {\n    console.error(\"Corrupt 2MG file.\")\n    return new Uint8Array()\n  }\n  if (diskData[12] !== 1) {\n    console.error(\"Only ProDOS 2MG files are supported.\")\n    return new Uint8Array()\n  }\n  driveState.filename = replaceSuffix(driveState.filename, 'hdv')\n  driveState.diskHasChanges = true\n  return diskData.slice(offset, offset + nbytes)\n}\n\nexport const isHardDriveImage = (filename: string) => {\n  const f = filename.toLowerCase()\n  return f.endsWith('.hdv') || f.endsWith('.po') || f.endsWith('.2mg')\n}\n\nexport const decodeDiskData = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n  driveState.diskHasChanges = false\n  const fname = driveState.filename.toLowerCase()\n  if (isHardDriveImage(fname)) {\n    driveState.hardDrive = true\n    driveState.status = ''\n    if (fname.endsWith('.hdv') || fname.endsWith('.po')) {\n      return diskData\n    }\n    if (fname.endsWith('.2mg')) {\n      return decode2MG(driveState, diskData)\n    }\n  }\n  if (isDSK(driveState.filename)) {\n    diskData = decodeDSK(driveState, diskData)\n  }\n  if (decodeWoz2(driveState, diskData)) {\n    return diskData\n  }\n  if (decodeWoz1(driveState, diskData)) {\n    return diskData\n  }\n  if (fname !== '') {\n    console.error(\"Unknown disk format.\")\n  }\n  return new Uint8Array()\n}\n","import { passDriveSound } from \"./worker2main\"\nimport { cycleCount } from './instructions'\nimport { toHex, DRIVE } from \"./utility\"\nimport { getCurrentDriveData, getCurrentDriveState, passData, setCurrentDrive } from \"./drivestate\"\n\nlet motorOffTimeout: any = 0\n\nconst SWITCH = {\n  MOTOR_OFF: 8,\n  MOTOR_ON: 9,\n  DRIVE1: 0xA,\n  DRIVE2: 0xB,\n  DATA_LATCH_OFF: 0xC,\n  DATA_LATCH_ON: 0xD,\n  WRITE_OFF: 0xE,\n  WRITE_ON: 0xF,\n  MOTOR_RUNNING: false,\n  DATA_LATCH: false,\n}\nexport const doResetDiskDrive = (driveState: DriveState) => {\n  SWITCH.MOTOR_RUNNING = false\n  doMotorTimeout(driveState)\n  driveState.halftrack = 68\n  driveState.prevHalfTrack = 68\n}\n\nexport const doPauseDiskDrive = (resume = false) => {\n  if (resume) {\n    const ds = getCurrentDriveState()\n    if (ds.motorRunning) {\n      startMotor(ds)\n    }\n  } else {\n    passDriveSound(DRIVE.MOTOR_OFF)\n  }\n}\n\nconst moveHead = (ds: DriveState, offset: number) => {\n  if (ds.trackStart[ds.halftrack] > 0) {\n    ds.prevHalfTrack = ds.halftrack\n  }\n  ds.halftrack += offset\n  if (ds.halftrack < 0 || ds.halftrack > 68) {\n    passDriveSound(DRIVE.TRACK_END)\n    ds.halftrack = (ds.halftrack < 0) ? 0 : (ds.halftrack > 68 ? 68 : ds.halftrack)\n  } else {\n    passDriveSound(DRIVE.TRACK_SEEK)\n  }\n  ds.status = ` Track ${ds.halftrack / 2}`\n  passData()\n  // Adjust new track location based on arm position relative to old track loc.\n  if (ds.trackStart[ds.halftrack] > 0 && ds.prevHalfTrack !== ds.halftrack) {\n    // const oldloc = dState.trackLocation\n    ds.trackLocation = Math.floor(ds.trackLocation * (ds.trackNbits[ds.halftrack] / ds.trackNbits[ds.prevHalfTrack]))\n    if (ds.trackLocation > 3) {\n      ds.trackLocation -= 4\n    }\n  }\n}\n\nconst pickbit = [128, 64, 32, 16, 8, 4, 2, 1]\nconst clearbit = [0b01111111, 0b10111111, 0b11011111, 0b11101111,\n  0b11110111, 0b11111011, 0b11111101, 0b11111110]\n\nconst getNextBit = (ds: DriveState, dd: Uint8Array) => {\n  ds.trackLocation = ds.trackLocation % ds.trackNbits[ds.halftrack]\n  let bit: number\n  if (ds.trackStart[ds.halftrack] > 0) {\n    const fileOffset = ds.trackStart[ds.halftrack] + (ds.trackLocation >> 3)\n    const byte = dd[fileOffset]\n    const b = ds.trackLocation & 7\n    bit = (byte & pickbit[b]) >> (7 - b)\n  } else {\n    // TODO: Freak out like a MC3470 and return random bits\n    bit = 1\n  }\n  ds.trackLocation++\n  return bit\n}\n\nlet dataRegister = 0\n\nconst getNextByte = (ds: DriveState, dd: Uint8Array) => {\n  if (dd.length === 0) return 0\n  let result = 0\n  if (dataRegister === 0) {\n    while (getNextBit(ds, dd) === 0) {}\n    // This will become the high bit on the next read\n    dataRegister = 0x40\n    // Read the next 6 bits, all except the last one.\n    for (let i = 5; i >= 0; i--) {\n      dataRegister |= getNextBit(ds, dd) << i\n    }\n  } else {\n    // Read the last bit.\n    const bit = getNextBit(ds, dd)\n    dataRegister = (dataRegister << 1) | bit\n  }\n  result = dataRegister\n  if (dataRegister > 127) {\n    dataRegister = 0\n  }\n  return result\n}\n\nlet prevCycleCount = 0\n\nconst doWriteBit = (ds: DriveState, dd: Uint8Array, bit: 0 | 1) => {\n  ds.trackLocation = ds.trackLocation % ds.trackNbits[ds.halftrack]\n  // TODO: What about writing to empty tracks?\n  if (ds.trackStart[ds.halftrack] > 0) {\n    const fileOffset = ds.trackStart[ds.halftrack] + (ds.trackLocation >> 3)\n    let byte = dd[fileOffset]\n    const b = ds.trackLocation & 7\n    if (bit) {\n      byte |= pickbit[b]\n    } else {\n      byte &= clearbit[b]\n    }\n    dd[fileOffset] = byte\n  }\n  ds.trackLocation++\n}\n\nconst doWriteByte = (ds: DriveState, dd: Uint8Array, delta: number) => {\n  // Sanity check to make sure we aren't on an empty track. Is this correct?\n  if (dd.length === 0 || ds.trackStart[ds.halftrack] === 0) {\n    return\n  }\n  if (dataRegister > 0) {\n    if (delta >= 16) {\n      for (let i = 7; i >= 0; i--) {\n        doWriteBit(ds, dd, dataRegister & 2**i ? 1 : 0)      \n      }\n    }\n    if (delta >= 36) {\n      doWriteBit(ds, dd, 0)\n    }\n    if (delta >= 40) {\n      doWriteBit(ds, dd, 0)\n    }\n    debugCache.push(delta >= 40 ? 2 : delta >= 36 ? 1 : dataRegister)\n    ds.diskHasChanges = true\n    dataRegister = 0\n  }\n}\n\nconst doMotorTimeout = (ds: DriveState) => {\n  motorOffTimeout = 0\n  if (!SWITCH.MOTOR_RUNNING) {\n    ds.motorRunning = false\n  }\n  passData()\n  passDriveSound(DRIVE.MOTOR_OFF)\n}\n\nconst startMotor = (ds: DriveState) => {\n  if (motorOffTimeout) {\n    clearTimeout(motorOffTimeout)\n    motorOffTimeout = 0\n  }\n  ds.motorRunning = true\n  passData()\n  passDriveSound(DRIVE.MOTOR_ON)\n}\n\nconst stopMotor = (ds: DriveState) => {\n  if (motorOffTimeout === 0) {\n    motorOffTimeout = setTimeout(() => doMotorTimeout(ds), 1000);\n  }\n}\n\nlet debugCache:number[] = []\nconst doDebugDrive = false\n\nconst dumpData = (ds: DriveState, addr: number) => {\n  // if (dataRegister !== 0) {\n  //   console.error(`addr=${toHex(addr)} writeByte= ${dataRegister}`)\n  // }\n  if (debugCache.length > 0 && ds.halftrack === 2 * 0x00) {\n    if (doDebugDrive) {\n      let output = `TRACK ${toHex(ds.halftrack/2)}: `\n      let out = ''\n      debugCache.forEach(element => {\n        switch (element) {\n          case 1: out = 'Ff'; break;\n          case 2: out = 'FF'; break;\n          default: out = element.toString(16); break;\n        }\n        output += out + ' '\n      });\n      console.log(output)\n    }\n    debugCache = []\n  }\n}\n\nlet STEPPER_MOTORS = [0, 0, 0, 0]\n\nexport const handleDriveSoftSwitches: AddressCallback =\n  (addr: number, value: number): number => {\n  // We don't care about memgets to our card firmware, only to our card I/O\n  if (addr >= 0xC100) return -1\n  let ds = getCurrentDriveState()\n  let dd = getCurrentDriveData()\n  if (ds.hardDrive) return 0\n  let result = 0\n  const delta = cycleCount - prevCycleCount\n  // if (doDebugDrive && value !== 0x96) {\n  //   const dc = (delta < 100) ? `  deltaCycles=${delta}` : ''\n  //   const wb = (dataRegister > 0) ? `  writeByte=$${toHex(dataRegister)}` : ''\n  //   const v = (value > 0) ? `  value=$${toHex(value)}` : ''\n  //   console.log(`write ${ds.writeMode}  addr=$${toHex(addr)}${dc}${wb}${v}`)\n  // }\n  addr = addr & 0xF\n  switch (addr) {\n    case SWITCH.DATA_LATCH_OFF:  // SHIFT/READ\n      SWITCH.DATA_LATCH = false\n      if (ds.motorRunning && !ds.writeMode) {\n        result = getNextByte(ds, dd)\n      }\n      break\n    case SWITCH.MOTOR_ON:\n      SWITCH.MOTOR_RUNNING = true\n      startMotor(ds)\n      dumpData(ds, addr)\n      break\n    case SWITCH.MOTOR_OFF:\n      SWITCH.MOTOR_RUNNING = false\n      stopMotor(ds)\n      dumpData(ds, addr)\n      break\n    case SWITCH.DRIVE1: // fall thru\n    case SWITCH.DRIVE2:\n      const currentDrive = (addr === SWITCH.DRIVE1) ? 1 : 2\n      const dsOld = getCurrentDriveState()\n      setCurrentDrive(currentDrive)\n      ds = getCurrentDriveState()\n      if (ds !== dsOld && dsOld.motorRunning) {\n        dsOld.motorRunning = false\n        ds.motorRunning = true\n        passData()\n      }\n      break\n    case SWITCH.WRITE_OFF:  // READ, Q7LOW\n      if (ds.motorRunning && ds.writeMode) {\n        doWriteByte(ds, dd, delta)\n        // Reset the Disk II Logic State Sequencer clock\n        prevCycleCount = cycleCount\n      }\n      ds.writeMode = false\n      if (SWITCH.DATA_LATCH) {\n        result = ds.isWriteProtected ? 0xFF : 0\n      }\n      dumpData(ds, addr)\n      break\n    case SWITCH.WRITE_ON:  // WRITE, Q7HIGH\n      ds.writeMode = true\n      // Reset the Disk II Logic State Sequencer clock\n      prevCycleCount = cycleCount\n      if (value >= 0) {\n        dataRegister = value\n      }\n      break\n    case SWITCH.DATA_LATCH_ON:  // LOAD/READ, Q6HIGH\n      SWITCH.DATA_LATCH = true\n      if (ds.motorRunning) {\n        if (ds.writeMode) {\n          doWriteByte(ds, dd, delta)\n          // Reset the Disk II Logic State Sequencer clock\n          prevCycleCount = cycleCount\n        }\n        if (value >= 0) {\n          dataRegister = value\n        }\n      }\n      break\n    default:\n      if (addr < 0 || addr > 7) break\n      // One of the stepper motors has been turned on or off\n      STEPPER_MOTORS[Math.floor(addr / 2)] = addr % 2\n      const ascend = STEPPER_MOTORS[(ds.currentPhase + 1) % 4]\n      const descend = STEPPER_MOTORS[(ds.currentPhase + 3) % 4]\n      // Make sure our current phase motor has been turned off.\n      if (!STEPPER_MOTORS[ds.currentPhase]) {\n        if (ds.motorRunning && ascend) {\n          moveHead(ds, 1)\n          ds.currentPhase = (ds.currentPhase + 1) % 4\n\n        } else if (ds.motorRunning && descend) {\n          moveHead(ds, -1)\n          ds.currentPhase = (ds.currentPhase + 3) % 4\n        }\n      }\n      // if (doDebugDrive) {\n      //   const phases = `${ps[0].isSet ? 1 : 0}${ps[1].isSet ? 1 : 0}` +\n      //     `${ps[2].isSet ? 1 : 0}${ps[3].isSet ? 1 : 0}`\n      //   console.log(`***** PC=${toHex(s6502.PC,4)}  addr=${toHex(addr,4)} ` +\n      //     `phase ${a >> 1} ${a % 2 === 0 ? \"off\" : \"on \"}  ${phases}  ` +\n      //     `track=${dState.halftrack / 2}`)\n      // }\n      dumpData(ds, addr)\n      break\n  }\n\n  return result\n}\n","import { pcodes } from \"./instructions\";\nimport { toHex, isRelativeInstr, MODE } from \"./utility\";\n\nconst doOutput = false\n\ntype CodeLine = {\n  label: string,\n  instr: string,\n  operand: string,\n}\n\ntype LabelOperand = {\n  label: string,\n  operation: string,\n  value: number\n}\n\nconst parseNumberOptionalAddressMode = (operand: string): [MODE, number] => {\n  let mode: MODE = MODE.IMPLIED;\n  let value = -1\n\n  if (operand.length > 0) {\n    if (operand.startsWith('#')) {\n      mode = MODE.IMM\n      operand = operand.substring(1)\n    } else if (operand.startsWith('(')) {\n      if (operand.endsWith(\",Y\")) {\n        mode = MODE.IND_Y\n      } else if (operand.endsWith(\",X)\")) {\n        mode = MODE.IND_X\n      } else {\n        mode = MODE.IND\n      }\n      operand = operand.substring(1)\n    } else if (operand.endsWith(\",X\")) {\n      mode = (operand.length > 5) ? MODE.ABS_X : MODE.ZP_X\n    } else if (operand.endsWith(\",Y\")) {\n      mode = (operand.length > 5) ? MODE.ABS_Y : MODE.ZP_Y\n    } else {\n      mode = (operand.length > 3) ? MODE.ABS : MODE.ZP_REL\n    }\n\n    if (operand.startsWith('$')) {\n      operand = \"0x\" + operand.substring(1)\n    }\n    value = parseInt(operand)\n  }\n\n  return [mode, value]\n}\n\n\nlet labels: { [key: string]: number } = {};\n\nconst splitOperand = (operand: string) => {\n  const s = operand.split(/([+-])/)\n  const codeLine: LabelOperand = {\n    label: s[0] ? s[0] : '',\n    operation: s[1] ? s[1] : '',\n    value: s[2] ? parseInt(s[2].replace('#','').replace('$','0x')) : 0\n  }\n  return codeLine\n}\n\nconst getOperandModeValue =\n  (pc: number, instr: string, operand: string, pass: 1 | 2): [MODE, number] => {\n    let mode = MODE.IMPLIED\n    let value = -1\n    if (operand.match(/^[#]?[$0-9()]+/)) {\n      return parseNumberOptionalAddressMode(operand)\n    }\n    const labelOperand = splitOperand(operand)\n    if (labelOperand.label) {\n      // See if we have an immediate value, like #CONST\n      const isImmediate = labelOperand.label.startsWith('#')\n      if (isImmediate) {\n        labelOperand.label = labelOperand.label.substring(1)\n      }\n      if (labelOperand.label in labels) {\n        value = labels[labelOperand.label]\n      } else if (pass === 2) {\n          throw new Error(\"Missing label: \" + labelOperand.label);\n      }\n      if (labelOperand.operation && labelOperand.value) {\n        switch (labelOperand.operation) {\n          case '+': value += labelOperand.value\n            break;\n          case '-': value -= labelOperand.value\n            break;\n          default:\n            throw new Error(\"Unknown operation in operand: \" + operand);\n        }\n        value = (value % 65536 + 65536) % 65536\n      }\n      if (isRelativeInstr(instr)) {\n        mode = MODE.ZP_REL\n        value = (value - pc + 254)\n        if (value > 255) value -= 256\n      } else {\n        if (isImmediate) {\n          mode = MODE.IMM\n        } else {\n          mode = (value >= 0 && value <= 255) ? MODE.ZP_REL : MODE.ABS\n        }\n      }\n    }\n    return [mode, value]\n}\n\nconst splitLine = (line: string, prevLabel: string) => {\n  line = line.replace(/\\s+/g, ' ')\n  const s = line.split(' ')\n  const codeLine: CodeLine = {\n    label: s[0] ? s[0] : prevLabel,\n    instr: s[1] ? s[1] : '',\n    operand: s[2] ? s[2] : ''\n  }\n  return codeLine\n}\n\nconst handleLabel = (parts: CodeLine, pc: number) => {\n  if (parts.label in labels) {\n    throw new Error(\"Redefined label: \" + parts.label)\n  }\n  if (parts.instr === 'EQU') {\n    const [mode, value] = parseNumberOptionalAddressMode(parts.operand)\n    if (mode !== MODE.ABS && mode !== MODE.ZP_REL) {\n      throw new Error(\"Illegal EQU value: \" + parts.operand)\n    }\n    labels[parts.label] = value\n  } else {\n    labels[parts.label] = pc\n  }\n}\n\nconst getHexCodesForInstruction = (match: number, value: number) => {\n  let newInstructions: Array<number> = [];\n  const pcode = pcodes[match]\n  newInstructions.push(match);\n  if (value >= 0) {\n    newInstructions.push(value % 256)\n    if (pcode.PC === 3) {\n      newInstructions.push(Math.trunc(value / 256))\n    }\n  }\n  return newInstructions\n}\n\nconst parseOnce = (start: number, code: Array<string>, pass: 1 | 2): Array<number> => {\n  let pc = start\n  let instructions: Array<number> = [];\n  let prevLabel = ''\n  code.forEach(line => {\n    line = (line.split(';'))[0].trimEnd().toUpperCase()\n    if (!line) return\n    let output = (line + '                   ').slice(0, 30) + toHex(pc, 4) + \"- \"\n\n    const codeLine = splitLine(line, prevLabel)\n    prevLabel = ''\n\n    // Just a label by itself, just tack onto the beginning of next line.\n    if (!codeLine.instr) {\n      prevLabel = codeLine.label\n      return\n    }\n\n    if (codeLine.instr === 'ORG') {\n      if (doOutput && pass === 2) console.log(output)\n      return\n    }\n\n    if (pass === 1 && codeLine.label) {\n      handleLabel(codeLine, pc)\n    }\n\n    if (codeLine.instr === 'EQU') {\n      return\n    }\n\n    const [mode, value] = getOperandModeValue(pc, codeLine.instr, codeLine.operand, pass)\n\n    if (isRelativeInstr(codeLine.instr) && (value < 0 || value > 255)) {\n      throw new Error(`Branch instruction out of range: ${line} value: ${value}`);\n    }\n\n    const match = pcodes.findIndex(pc => pc && pc.name === codeLine.instr && pc.mode === mode)\n    if (match < 0) {\n      throw new Error(`Unknown instruction: ${codeLine.instr} mode=${mode} pass=${pass}`);\n    }\n    const newInstructions = getHexCodesForInstruction(match, value)\n    pc += pcodes[match].PC\n\n    if (doOutput && pass === 2) {\n      newInstructions.forEach(i => {output += ` ${toHex(i)}`});\n      console.log(output)\n    }\n    instructions.push(...newInstructions)\n  });\n\n  return instructions\n}\n\nexport const parseAssembly = (start: number, code: Array<string>): Array<number> => {\n  labels = {}\n  try {\n    parseOnce(start, code, 1)\n    const instructions = parseOnce(start, code, 2)\n    return instructions\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\n","import { parseAssembly } from \"./assembler\"\nimport { setX, setY, setCarry, s6502 } from \"./instructions\"\nimport { setSlotDriver, memGet, getDataBlock, setMemoryBlock, memSet } from \"./memory\"\nimport { getHardDriveData, getHardDriveState, passData } from \"./drivestate\"\nimport { toHex } from \"./utility\"\n\nlet timerID: any | number = 0\n\n// $Cx00 + driverAddr = address for our hard drive driver\n// SmartPort driver is this address + 3\nconst driverAddr = 0xC0\n\nconst code1 = `\n         LDX   #$20    ; Apple IIe looks for magic bytes $20, $00, $03.\n         LDA   #$00    ; These indicate a disk drive or SmartPort device.\n         LDX   #$03\n         LDA   #$00    ; $3C=disk drive, $00=SmartPort\n         BIT   $CFFF   ; Trigger all peripheral cards to turn off expansion ROMs\n         LDA   #$01    ; ProDOS command code = READ\n         STA   $42     ; Store ProDOS command code\n         LDA   #$4C    ; JMP\n         STA   $07FD\n         LDA   #$${toHex(driverAddr)}   ; jump address\n         STA   $07FE\n         LDA   #$60    ; Fake RTS to determine our slot\n         STA   $07FF\n         JSR   $07FF\n         TSX\n         LDA   $100,X  ; High byte of slot adddress\n         STA   $07FF   ; Store this for the high byte of our JMP command\n         ASL           ; Shift $Cs up to $s0 (e.g. $C7 -> $70)\n         ASL           ; We need this for the ProDOS unit number (below).\n         ASL           ; Format = bits DSSS0000\n         ASL           ; D = drive number (0), SSS = slot number (1-7)\n         STA   $43     ; Store ProDOS unit number here\n         LDA   #$08    ; Store block (512 bytes) at address $0800\n         STA   $45     ; Address high byte\n         LDA   #$00\n         STA   $44     ; Address low byte\n         STA   $46     ; Block 0 low byte\n         STA   $47     ; Block 0 high byte\n         JSR   $07FD   ; Read the block (will JMP to our driver and trigger it)\n         BCS   ERROR\n         LDA   #$0A    ; Store block (512 bytes) at address $0A00\n         STA   $45     ; Address high byte\n         LDA   #$01\n         STA   $46     ; Block 1 low byte\n         JSR   $07FD   ; Read\n         BCS   ERROR\n         LDA   $0801   ; Should be nonzero\n         BEQ   ERROR\n         LDA   #$01    ; Should always be 1\n         CMP   $0800\n         BNE   ERROR\n         LDX   $43     ; ProDOS block 0 code wants ProDOS unit number in X\n         JMP   $801    ; Continue reading the disk\nERROR    JMP   $E000   ; Out to BASIC on error\n`\nconst code2 = `\n         NOP           ; Hard drive driver address\n         BRA   DONE\n         TSX           ; SmartPort driver address\n         INX\n         INC   $100,X\n         INC   $100,X\n         INC   $100,X\nDONE     BCS   ERR\n         LDA   #$00\n         RTS\nERR      LDA   #$27\n         RTS\n`\n\n// $CnFE status byte\n//  bit 7 - Medium is removable.\n//  bit 6 - Device is interruptable.\n//  bit 5-4 - Number of volumes on the device (0-3).\n//  bit 3 - The device supports formatting.\n//  bit 2 - The device can be written to.\n//  bit 1 - The device can be read from (must be on).\n//  bit 0 - The device's status can be read (must be on).\n\nconst prodos8driver = () => {\n  const driver = new Uint8Array(256).fill(0)\n  const pcode1 = parseAssembly(0x0, code1.split(\"\\n\"))\n  driver.set(pcode1, 0)\n  const pcode2 = parseAssembly(0x0, code2.split(\"\\n\"))\n  driver.set(pcode2, driverAddr)\n  driver[0xFE] = 0b00010111  // see above\n  driver[0xFF] = driverAddr\n  return driver\n}\n\nlet code = new Uint8Array()\n\nexport const enableHardDrive = (enable = true) => {\n  const slot = 7\n  if (code.length === 0) {\n    code = prodos8driver()\n  }\n  code[1] = enable ? 0x20 : 0x00\n  const addr = 0xC000 + driverAddr + slot * 0x100\n  setSlotDriver(slot, code, addr, processHardDriveBlockAccess)\n  setSlotDriver(slot, code, addr + 3, processSmartPortAccess)\n}\n\nconst processSmartPortAccess = () => {\n  const ds = getHardDriveState()\n  if (!ds.hardDrive) return\n  const dd = getHardDriveData()\n  const S = 0x100 + s6502.StackPtr\n  const callAddr = memGet(S + 1) + 256 * memGet(S + 2)\n  const spCommand = memGet(callAddr + 1)\n  const spParamList = memGet(callAddr + 2) + 256 * memGet(callAddr + 3)\n  // These parameters are needed for status (0), read (1), and write (2)\n  const unitNumber = memGet(spParamList + 1)\n  const bufferAddr = memGet(spParamList + 2) + 256 * memGet(spParamList + 3)\n\n  switch (spCommand) {\n    case 0:\n      if (memGet(spParamList) !== 0x03) {\n        console.error(`Incorrect SmartPort parameter count at address ${spParamList}`)\n        setCarry()\n        return\n      }\n      const statusCode = memGet(spParamList + 4)\n      switch (statusCode) {\n        case 0:\n          if (unitNumber === 0) {\n            // Store number of SmartPort devices in the status buffer.\n            memSet(bufferAddr, 1)\n            setCarry(false)\n          } else {\n            console.error(`SmartPort status for unitNumber ${unitNumber} not implemented`)\n            setCarry()\n          }\n          break\n        default:\n          console.error(`SmartPort statusCode ${statusCode} not implemented`)\n          setCarry()\n          break\n      }\n      return\n    case 1:\n      if (memGet(spParamList) !== 0x03) {\n        console.error(`Incorrect SmartPort parameter count at address ${spParamList}`)\n        setCarry()\n        return\n      }\n      const block = memGet(spParamList + 4) + 256 * memGet(spParamList + 5) +\n        65536 * memGet(spParamList + 6)\n      const blockStart = 512 * block\n      const dataRead = dd.slice(blockStart, blockStart + 512)\n      setMemoryBlock(bufferAddr, dataRead)\n      break\n    case 2:\n    default:\n      console.error(`SmartPort command ${spCommand} not implemented`)\n      setCarry()\n      return\n  }\n  setCarry(false)\n  ds.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      if (ds) ds.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}\n\nconst processHardDriveBlockAccess = () => {\n  const ds = getHardDriveState()\n  if (!ds.hardDrive) return\n  const dd = getHardDriveData()\n  const block = memGet(0x46) + 256 * memGet(0x47)\n  const blockStart = 512 * block\n  let bufferAddr = memGet(0x44) + 256 * memGet(0x45)\n  const dataLen = dd.length\n  ds.status = ` ${toHex(block, 4)} ${toHex(bufferAddr, 4)}`\n//  console.log(`cmd=${memGet(0x42)} ${ds.status}`)\n\n  switch (memGet(0x42)) {\n    case 0:\n      // Status test: 300: A2 AB A0 CD 8D 06 C0 A9 00 85 42 A9 70 85 43 20 EA C7 00\n      if (ds.filename.length === 0 || dataLen === 0) {\n        setX(0)\n        setY(0)\n        setCarry()\n        return\n      }\n      const nblocks = dataLen / 512\n      setX(nblocks & 0xFF)\n      setY(nblocks >>> 8)\n      break\n    case 1:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataRead = dd.slice(blockStart, blockStart + 512)\n      setMemoryBlock(bufferAddr, dataRead)\n      break;\n    case 2:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataWrite = getDataBlock(bufferAddr)\n      dd.set(dataWrite, blockStart)\n      ds.diskHasChanges = true\n      break\n    case 3:\n      console.error(\"Hard drive format not implemented yet\")\n      setCarry()\n      return\n    default:\n      console.error(\"unknown hard drive command\")\n      setCarry()\n      return\n  }\n\n  setCarry(false)\n  ds.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      if (ds) ds.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}","import { Buffer } from \"buffer\"\nimport { passDriveProps, passDriveSound } from \"./worker2main\"\nimport { decodeDiskData, isHardDriveImage } from \"./decodedisk\"\nimport { doPauseDiskDrive, doResetDiskDrive } from \"./diskdata\"\nimport { enableHardDrive } from \"./harddrivedata\"\nimport { DRIVE } from \"./utility\"\n\nconst initDriveState = (drive: number): DriveState => {\n  return {\n    hardDrive: drive === 0,\n    status: \"\",\n    filename: \"\",\n    diskHasChanges: false,\n    motorRunning: false,\n    isWriteProtected: false,\n    halftrack: 0,\n    prevHalfTrack: 0,\n    writeMode: false,\n    currentPhase: 0,\n    trackStart: drive > 0 ? Array<number>(80) : Array<number>(),\n    trackNbits: drive > 0 ? Array<number>(80) : Array<number>(),\n    trackLocation: 0,\n  }\n}\n\nconst driveState: DriveState[] = [initDriveState(0), initDriveState(1), initDriveState(2)]\nconst driveData: Array<Uint8Array> = [new Uint8Array(), new Uint8Array(), new Uint8Array()]\n\nlet currentDrive = 1\n\nexport const setCurrentDrive = (drive: number) => {currentDrive = drive}\n\nexport const getCurrentDriveState = () => driveState[currentDrive]\n\nexport const getCurrentDriveData = () => driveData[currentDrive]\n\nexport const getHardDriveState = () => driveState[0]\nexport const getHardDriveData = () => driveData[0]\n\nexport const getFilename = () => {\n  for (let i = 0; i < driveState.length; i++) {\n    if (driveState[i].filename !== \"\") return driveState[i].filename\n  }\n  return \"\"\n}\n\nexport const passData = () => {\n  for (let i = 0; i < driveState.length; i++) {\n    const dprops: DriveProps = {\n      hardDrive: driveState[i].hardDrive,\n      drive: i,\n      filename: driveState[i].filename,\n      status: driveState[i].status,\n      motorRunning: driveState[i].motorRunning,\n      diskHasChanges: driveState[i].diskHasChanges,\n      diskData: driveState[i].diskHasChanges ? driveData[i] : new Uint8Array()\n    }\n    passDriveProps(dprops)\n  }\n}\n\n// const isTotalReplay = (filename: string) => {\n//   return filename.replace(/ /g, '').toLowerCase().includes('totalreplay')\n// }\n\nexport const getDriveSaveState = (full: boolean): DriveSaveState => {\n  let data = ['', '', '']\n  // if (full && isTotalReplay(driveState[0].filename)) {\n  //   return {currentDrive: 0, driveState: [], driveData: []}\n  // }\n  for (let i=(full ? 0 : 1); i < 3; i++) {\n    data[i] = Buffer.from(driveData[i]).toString(\"base64\")\n  }\n  return { currentDrive: currentDrive,\n    driveState: driveState, driveData: data }\n}\n\nexport const restoreDriveSaveState = (newState: DriveSaveState) => {\n  passDriveSound(DRIVE.MOTOR_OFF)\n  currentDrive = newState.currentDrive\n  for (let i=0; i < 3; i++) {\n    driveState[i] = initDriveState(i)\n    driveData[i] = new Uint8Array()\n  }\n  for (let i=0; i < newState.driveState.length; i++) {\n    driveState[i] = newState.driveState[i]\n    if (newState.driveData[i] !== '') {\n      driveData[i] = new Uint8Array(Buffer.from(newState.driveData[i], 'base64'))\n    }\n  }\n  if (driveState[0].hardDrive) {\n    enableHardDrive(driveState[0].filename !== '')\n  }\n  passData()\n}\n\nexport const doResetDrive = () => {\n  doResetDiskDrive(driveState[1])\n  doResetDiskDrive(driveState[2])\n  passData()\n}\n\nexport const doPauseDrive = (resume = false) => {\n  doPauseDiskDrive(resume)\n  passData()\n}\n\nexport const doSetDriveProps = (props: DriveProps) => {\n  let drive = props.drive\n  // See if the \"wrong\" disk image was put into a drive. If so, swap the drive.\n  if (props.filename !== '') {\n    if (isHardDriveImage(props.filename)) {\n      drive = 0\n      driveState[0].hardDrive = true\n    } else {\n      if (drive === 0) drive = 1\n    }\n  }\n  driveState[drive] = initDriveState(drive)\n  driveState[drive].filename = props.filename\n  driveState[drive].motorRunning = props.motorRunning\n  driveData[drive] = decodeDiskData(driveState[drive], props.diskData)\n  if (driveData[drive].length === 0) {\n    driveState[drive].filename = ''\n  }\n  if (driveState[drive].hardDrive) {\n    enableHardDrive(driveState[drive].filename !== '')\n  }\n  passData()\n}\n","\n// export const code = ''\nexport const code2 = `\n        ORG   $300\n; set up Mockingboard\n        LDA #$C0    ; enable Mockingboard\n        STA $C030\n        LDA #$80    ; select channel 0\n        STA $C010\n        LDA #$00    ; set frequency LSB to 0\n        STA $C012\n        LDA #$05    ; set frequency MSB to 5 (261 Hz)\n        STA $C013\n        LDA #$0F    ; set volume to maximum\n        STA $C015\n\n; play notes\n        LDA #$80    ; start sound\n        STA $C010\n        LDX #20     ; loop for 20 cycles (approx. 1 second)\nLOOP    DEX\n        BNE LOOP\n        LDA #$00    ; stop sound\n        STA $C010\n\n; end of program\n        RTS\n`\nexport const code = `\n         ORG   $300\nFREQ     EQU   $350\nPLSWIDTH EQU   $352\n\n         LDA   #$FF\n         STA   FREQ\n         LDA   #$80\n         STA   PLSWIDTH\nPLAY     LDA   $C030\n         LDY   PLSWIDTH\nPULSE    DEY\n         BNE   PULSE\n         LDA   $C030\n         LDX   FREQ\nCOUNTDN  DEX\n         BNE   COUNTDN\n         JSR   READKB\n         JMP   PLAY\n\nINCR     INC   FREQ\n         RTS\n\nDECR     DEC   FREQ\n         RTS\n\nPULSEINC DEC   PLSWIDTH\n         INC   FREQ\n         RTS\n\nPULSEDEC INC   PLSWIDTH\n         DEC   FREQ\n         RTS\n\nREADKB   LDA   $C000\n         STA   $C010   \n         CMP   #$88\n         BEQ   INCR\n         CMP   #$95\n         BEQ   DECR\n         CMP   #$C1\n         BEQ   PULSEINC\n         CMP   #$DA\n         BEQ   PULSEDEC\n         RTS\n`\n","export const disk2driver = [0xA2,0x20,0xA0,0x00,0xA2,0x03,0x86,0x3C,0x8A,0x0A,0x24,0x3C,0xF0,0x10,0x05,0x3C,0x49,0xFF,0x29,0x7E,0xB0,0x08,0x4A,0xD0,0xFB,0x98,0x9D,0x56,0x03,0xC8,0xE8,0x10,0xE5,0x20,0x58,0xFF,0xBA,0xBD,0x00,0x01,0x0A,0x0A,0x0A,0x0A,0x85,0x2B,0xAA,0xBD,0x8E,0xC0,0xBD,0x8C,0xC0,0xBD,0x8A,0xC0,0xBD,0x89,0xC0,0xA0,0x50,0xBD,0x80,0xC0,0x98,0x29,0x03,0x0A,0x05,0x2B,0xAA,0xBD,0x81,0xC0,0xA9,0x56,0x20,0xA8,0xFC,0x88,0x10,0xEB,0x85,0x26,0x85,0x3D,0x85,0x41,0xA9,0x08,0x85,0x27,0x18,0x08,0xBD,0x8C,0xC0,0x10,0xFB,0x49,0xD5,0xD0,0xF7,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0xAA,0xD0,0xF3,0xEA,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0x96,0xF0,0x09,0x28,0x90,0xDF,0x49,0xAD,0xF0,0x25,0xD0,0xD9,0xA0,0x03,0x85,0x40,0xBD,0x8C,0xC0,0x10,0xFB,0x2A,0x85,0x3C,0xBD,0x8C,0xC0,0x10,0xFB,0x25,0x3C,0x88,0xD0,0xEC,0x28,0xC5,0x3D,0xD0,0xBE,0xA5,0x40,0xC5,0x41,0xD0,0xB8,0xB0,0xB7,0xA0,0x56,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x88,0x99,0x00,0x03,0xD0,0xEE,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x91,0x26,0xC8,0xD0,0xEF,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xD0,0x87,0xA0,0x00,0xA2,0x56,0xCA,0x30,0xFB,0xB1,0x26,0x5E,0x00,0x03,0x2A,0x5E,0x00,0x03,0x2A,0x91,0x26,0xC8,0xD0,0xEE,0xE6,0x27,0xE6,0x3D,0xA5,0x3D,0xCD,0x00,0x08,0xA6,0x2B,0x90,0xDB,0x4C,0x01,0x08,0x00,0x00,0x00,0x00,0x00]\n// export const slot_disk2=`oiCgAKIDhjyKCiQ88BAFPEn/KX6wCErQ+5idVgPI6BDlIFj/ur0AAQoKCgqFK6q9\n// jsC9jMC9isC9icCgUL2AwJgpAwoFK6q9gcCpViCo/IgQ64UmhT2FQakIhScYCL2M\n// wBD7SdXQ972MwBD7yarQ8+q9jMAQ+8mW8AkokN9JrfAl0NmgA4VAvYzAEPsqhTy9\n// jMAQ+yU8iNDsKMU90L6lQMVB0Liwt6BWhDy8jMAQ+1nWAqQ8iJkAA9DuhDy8jMAQ\n// +1nWAqQ8kSbI0O+8jMAQ+1nWAtCHoACiVsow+7EmXgADKl4AAyqRJsjQ7uYn5j2l\n// Pc0ACKYrkNtMAQgAAAAAAA==`\n","import { cycleCount, doInterruptRequest, doNonMaskableInterrupt, incrementPC, pcodes, s6502, setCycleCount } from \"./instructions\"\nimport { memGet, specialJumpTable } from \"./memory\"\nimport { doSetCPUState } from \"./motherboard\"\nimport { SWITCHES } from \"./softswitches\"\nimport { STATE, getInstrString, getProcessorStatus } from \"./utility\"\n\n// let prevMemory = Buffer.from(mainMem)\n// let DEBUG_ADDRESS = -1 // 0x9631\nlet doDebug = false\n// let doDebugZeroPage = false\nconst instrTrail = new Array<string>(1000)\nlet posTrail = 0\nlet breakpoint = -1\nlet runToRTS = false\n\nexport const doSetDebug = (debug = true) => {\n  doDebug = debug\n}\n\nexport const doSetRunToRTS = (run = true) => {\n  runToRTS = run\n}\n\nexport const doSetBreakpoint = (breakpt: number) => {\n  breakpoint = breakpt\n//  if (breakpoint !== 0) doDebug = true\n}\n\n// let memZP = new Uint8Array(256).fill(0)\n// const checkZeroPageDiff = () => {\n//   const mem = getDataBlock(0)\n//   const diff = new Uint8Array(256)\n//   let ndiff = 0\n//   for (let i=0; i < 256; i++) {\n//     diff[i] = mem[i] - memZP[i]\n//     memZP[i] = mem[i]\n//     if (diff[i]) ndiff++\n//   }\n//   const skip = [0x4E, 0xEB, 0xEC, 0xED, 0xF9, 0xFA, 0xFB, 0xFC]\n//   for (let i = 0; i < skip.length; i++) {\n//     if (diff[skip[i]]) {\n//       diff[skip[i]] = 0\n//       ndiff--\n//     }\n//   }\n//   let s = ''\n//   if (ndiff > 0 && ndiff < 127) {\n//     for (let i=0; i < 256; i++) {\n//       if (diff[i]) s += ` ${toHex(i)}:${toHex(diff[i])}`\n//     }\n//     console.log(s)\n//   }\n// }\n\nconst outputInstructionTrail = () => {\n  instrTrail.slice(posTrail).forEach(s => console.log(s));\n  instrTrail.slice(0, posTrail).forEach(s => console.log(s));\n}\n\nlet flagIRQ = 0x00\nexport const interruptRequest = (slot = 0, set = true) => {\n  // IRQ is level sensitive, so it is always active while true\n  if (set) {\n    flagIRQ |= (1<<slot)\n  } else {\n    flagIRQ &= ~(1<<slot)\n  }\n\n  flagIRQ &= 0xff\n}\n\nlet flagNMI = false\nlet nmiState = false\nexport const nonMaskableInterrupt = (set = true) => {\n  // NMI is edge sensitive, and is only activated on positive transition.\n  // That also means if multiple cards activate NMI at the same time\n  // there will be only 1 NMI transition and interrupt, so multiple slot state is\n  // not required.\n  flagNMI = set === true && nmiState === false\n  nmiState = set\n}\n\nexport const processInstruction = (step = false) => {\n  let cycles = 0\n  let PC1 = s6502.PC\n  const instr = memGet(s6502.PC)\n  const vLo = memGet(s6502.PC + 1)\n  const vHi = memGet(s6502.PC + 2)\n  let code =  pcodes[instr]\n  if (PC1 === breakpoint && !step) {\n    doSetCPUState(STATE.PAUSED)\n    return -1\n  }\n  // HACK\n  const fn = specialJumpTable.get(PC1)\n  if (fn && !SWITCHES.INTCXROM.isSet) {\n    fn()\n  }\n  // END HACK\n  cycles = code.execute(vLo, vHi)\n  // Do not output during the Apple II's WAIT subroutine\n  if (doDebug && (PC1 < 0xFCA8 || PC1 > 0xFCB3) && PC1 < 0xFF47) {\n    if (PC1 === 0xFFFFF) {\n      outputInstructionTrail()\n    }\n    const ins = getInstrString(code, vLo, vHi, PC1) + '            '\n    const out = `${ins.slice(0, 22)}  ${getProcessorStatus(s6502)}`\n    instrTrail[posTrail] = out\n    posTrail = (posTrail + 1) % instrTrail.length\n    console.log(out)\n  }\n  incrementPC(code.PC)\n  // NMI has higher priority, and is edge sensitive\n  if (flagNMI) {\n    // reset flag after a single activation\n    flagNMI = false\n    cycles += doNonMaskableInterrupt()\n  }\n  if (flagIRQ) {\n    cycles += doInterruptRequest()\n  }\n  setCycleCount(cycleCount + cycles)\n  if (runToRTS && code.pcode === 0x60) {\n    runToRTS = false\n    doSetCPUState(STATE.PAUSED)\n    return -1\n  }\n  return cycles\n}\n","// Clock Driver for Apple2TS by Michael Morrison (codebythepound@gmail.com)\n\nimport { setSlotDriver, memSet } from \"./memory\"\n\nconst zeroPad = (num : number, places : number) => String(num).padStart(places, '0')\n\n// from prodos8 manual:\n// ProDOS recognizes a clock card if the following bytes are present in the Cn00 ROM:\n//\n// $Cn00 = $08 $Cn02 = $28 $Cn04 = $58 $Cn06 = $70\n//\n// The ProDOS clock driver uses the following addresses for its I/O to the clock:\n//\n// Cn08 - READ entry point Cn0B - WRITE entry point\n\nconst prodos8driver = () => {\n  const driver = new Uint8Array(256).fill(0x60) // RTS\n  driver[0x00] = 0x08\n  driver[0x02] = 0x28\n  driver[0x04] = 0x58\n  driver[0x06] = 0x70\n  return driver\n}\n\nconst code = prodos8driver();\n\nexport const enableClockCard = (enable = true, slot = 2) => {\n  if (!enable)\n    return\n\n  const readAddr = 0x08\n  const addr = 0xC000 + readAddr + slot * 0x100\n  setSlotDriver(slot, code, addr, handleClockRead)\n}\n\nconst handleClockRead = () => {\n  // from prodos8 manual:\n  // The ProDOS clock driver expects the clock card to send an ASCII string to the GETLN input buffer ($200).\n  // This string must have the following format (including the commas):\n  //\n  // mo,da,dt,hr,mn\n  //\n  // where:\n  // mo is the month (01 = January...12 = December)\n  // da is the day of the week (00 = Sunday...06 = Saturday)\n  // dt is the date (01 through 31)\n  // hr is the hour (00 through 23)\n  // mn is the minute (00 through 59)\n  //\n  // For example:\n  //\n  // 07,04,14,22,46\n  //\n  // would represent Thursday, July 14, 10:46 p.m. The year is looked up in a table in the clock driver.\n\n  const date = new Date()\n  const output = zeroPad(date.getMonth() + 1, 2)  + ','\n               + zeroPad(date.getDay(), 2)    + ','\n               + zeroPad(date.getDate(), 2)   + ','\n               + zeroPad(date.getHours(), 2)  + ','\n               + zeroPad(date.getMinutes(), 2)\n\n  // write to 0x200 and convert to high ascii\n  for(let i=0;i<output.length;i++)\n    memSet(0x200+i, output.charCodeAt(i) | 0x80)\n}\n","import { cycleCount } from \"./instructions\";\nimport { debugSlot, setSlotIOCallback } from \"./memory\"\n\n// const code = new Uint8Array(256).fill(0x60);\nlet currentSlot = 0\n\nexport const enableMockingboard = (enable = true, slot = 4) => {\n  if (!enable)\n    return\n  currentSlot = slot\n  setSlotIOCallback(slot, handleMockingboard)\n}\n\nexport const handleMockingboard: AddressCallback = (addr: number, value = -1) => {\n  if (addr < 0xC100) return -1\n  debugSlot(currentSlot, addr, value)\n  const address = addr & 0xFF\n  switch (address) {\n    case 0x04: // fall thru\n    case 0x84: return 255 - (cycleCount % 256)\n    default:\n      break;\n  }\n  return -1\n}\n","// Chris Torrence, 2022\nimport { Buffer } from \"buffer\"\nimport { passMachineState } from \"./worker2main\"\nimport { s6502, set6502State, reset6502, setCycleCount, stack, setPC } from \"./instructions\"\nimport { STATE, toHex } from \"./utility\"\nimport { getDriveSaveState, restoreDriveSaveState, doResetDrive, doPauseDrive } from \"./drivestate\"\n// import { slot_omni } from \"./roms/slot_omni_cx00\"\nimport { SWITCHES } from \"./softswitches\";\nimport { memory, memGet, getTextPage, getHires,  setSlotDriver, memoryReset,\n  updateAddressTables, setMemoryBlock, setSlotIOCallback } from \"./memory\"\nimport { setButtonState, handleGamepads } from \"./joystick\"\nimport { parseAssembly } from \"./assembler\";\nimport { code } from \"./assemblycode\"\nimport { disk2driver } from \"./roms/slot_disk2_cx00\"\nimport { handleGameSetup } from \"./game_mappings\"\nimport { doSetDebug, doSetRunToRTS, processInstruction } from \"./cpu6502\"\nimport { enableClockCard } from \"./clock\"\nimport { enableMockingboard } from \"./mockingboard\"\nimport { handleDriveSoftSwitches } from \"./diskdata\"\n\n// let timerID: any | number = 0\nlet startTime = 0\nlet prevTime = 0\nlet normalSpeed = true\nlet speed = 0\nlet refreshTime = 16.6881 // 17030 / 1020.488\nlet timeDelta = 0\nlet cpuState = STATE.IDLE\nlet iRefresh = 0\nlet saveTimeSlice = false\nlet iSaveState = 0\nlet iTempState = 0\nlet maxState = 60\nlet saveStates = Array<EmulatorSaveState>(maxState)\nexport let inVBL = false\n\n// methods to capture start and end of VBL for other devices that may need it (mouse)\nconst startVBL = (): void => {\n  inVBL = true\n}\n\nconst endVBL = (): void => {\n  inVBL = false\n}\n\nconst getApple2State = (): Apple2SaveState => {\n  // Make a copy\n  const save6502 = JSON.parse(JSON.stringify(s6502))\n  const softSwitches: { [name: string]: boolean } = {}\n  for (const key in SWITCHES) {\n    softSwitches[key] = SWITCHES[key as keyof typeof SWITCHES].isSet\n  }\n  const membuffer = Buffer.from(memory)\n  // let memdiff: { [addr: number]: number } = {};\n  // for (let i = 0; i < memory.length; i++) {\n  //   if (prevMemory[i] !== memory[i]) {\n  //     memdiff[i] = memory[i]\n  //   }\n  // }\n  // prevMemory = memory\n  return {\n    s6502: save6502,\n    softSwitches: softSwitches,\n    memory: membuffer.toString(\"base64\"),\n  }\n}\n\nconst setApple2State = (newState: Apple2SaveState) => {\n  set6502State(JSON.parse(JSON.stringify(newState.s6502)))\n  const softSwitches: { [name: string]: boolean } = newState.softSwitches\n  for (const key in softSwitches) {\n    const keyTyped = key as keyof typeof SWITCHES\n    try {\n      SWITCHES[keyTyped].isSet = softSwitches[key]    \n    } catch (error) {\n    }\n  }\n  memory.set(Buffer.from(newState.memory, \"base64\"))\n  updateAddressTables()\n  handleGameSetup(true)\n}\n\n// export const doRequestSaveState = () => {\n//   passSaveState(doGetSaveState())\n// }\n\nexport const doGetSaveState = (full = false): EmulatorSaveState => {\n  const state = { emulator: null,\n    state6502: getApple2State(),\n    driveState: getDriveSaveState(full)\n  }\n  return state\n//  return Buffer.from(compress(JSON.stringify(state)), 'ucs2').toString('base64')\n}\n\nexport const doRestoreSaveState = (sState: EmulatorSaveState) => {\n  setApple2State(sState.state6502)\n  restoreDriveSaveState(sState.driveState)\n  updateExternalMachineState()\n}\n\n// const testTiming = () => {\n//   let t0 = performance.now()\n//   for (let j = 0; j < 10000; j++) {\n//     for (let i = 0; i < 0xBFFF; i++) {\n//       memGet(i)    \n//     }\n//   }\n//   let tdiff = performance.now() - t0\n//   console.log(`memGet time = ${tdiff}`)\n//   t0 = performance.now()\n//   for (let j = 0; j < 10000; j++) {\n//     for (let i = 0; i < 0xBFFF; i++) {\n//       memSet(i, 255)    \n//     }\n//   }\n//   tdiff = performance.now() - t0\n//   console.log(`memSet time = ${tdiff}`)\n// }\n\nconst registerDiskDriver = () => {\n  setSlotDriver(6, Uint8Array.from(disk2driver))\n  setSlotIOCallback(6, handleDriveSoftSwitches)\n}\n\nconst doBoot = (setDrive = true) => {\n  setCycleCount(0)\n  memoryReset()\n  enableClockCard()\n  enableMockingboard()\n  if (setDrive) registerDiskDriver()\n  if (code.length > 0) {\n    let pcode = parseAssembly(0x300, code.split(\"\\n\"));\n    memory.set(pcode, 0x300);\n  }\n//  testTiming()\n  doReset()\n}\n\nconst doReset = () => {\n//  memoryReset()\n  for (const key in SWITCHES) {\n    const keyTyped = key as keyof typeof SWITCHES\n    SWITCHES[keyTyped].isSet = false\n  }\n  SWITCHES.TEXT.isSet = true\n  // Reset banked RAM\n  memGet(0xC082)\n  reset6502()\n  doResetDrive()\n  setButtonState()\n}\n\nexport const doSetNormalSpeed = (normal: boolean) => {\n  normalSpeed = normal\n  refreshTime = normalSpeed ? 16.6881 : 0\n  resetRefreshCounter()\n}\n\nconst getGoBackwardIndex = () => {\n  const newTmp = (iTempState + maxState - 1) % maxState\n  if (newTmp === iSaveState || !saveStates[newTmp]) {\n    return -1\n  }\n  return newTmp\n}\n\nconst getGoForwardIndex = () => {\n  if (iTempState === iSaveState) {\n    return -1\n  }\n  const newTmp = (iTempState + 1) % maxState\n  if (!saveStates[newTmp]) {\n    return -1\n  }\n  return newTmp\n}\n\nexport const doGoBackInTime = () => {\n  const newTmp = getGoBackwardIndex()\n  if (newTmp < 0) return\n  doSetCPUState(STATE.PAUSED)\n  setTimeout(() => {\n    // if this is the first time we're called, make sure our current\n    // state is up to date\n    if (iTempState === iSaveState) {\n      saveStates[iSaveState] = doGetSaveState()\n    }\n    iTempState = newTmp\n    doRestoreSaveState(saveStates[newTmp])    \n  }, 50)\n}\n\nexport const doGoForwardInTime = () => {\n  const newTmp = getGoForwardIndex()\n  if (newTmp < 0) return\n  doSetCPUState(STATE.PAUSED)\n  setTimeout(() => {\n    iTempState = newTmp\n    doRestoreSaveState(saveStates[newTmp])\n  }, 50)\n}\n\nexport const doSaveTimeSlice = () => {\n  // Set a flag and save our slice at the end of the next 6502 display cycle.\n  // Otherwise we risk saving in the middle of a keystroke.\n  saveTimeSlice = true\n}\n\nexport const doStepInto = () => {\n  doSetDebug()\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  processInstruction(true)\n  cpuState = STATE.PAUSED\n  updateExternalMachineState()\n}\n\nexport const doStepOver = () => {\n  doSetDebug()\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  if (memGet(s6502.PC) === 0x20) {\n    // If we're at a JSR then briefly step in, then step out.\n    processInstruction(true)\n    doStepOut()\n  } else {\n    // Otherwise just do a single step.\n    doStepInto()\n  }\n}\n\nexport const doStepOut = () => {\n  doSetDebug()\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  doSetRunToRTS()\n  doSetCPUState(STATE.RUNNING)\n}\n\nconst resetRefreshCounter = () => {\n  iRefresh = 0\n  prevTime = performance.now()\n  startTime = prevTime\n}\n\nexport const doSetCPUState = (cpuStateIn: STATE) => {\n  cpuState = cpuStateIn\n  if (cpuState === STATE.PAUSED || cpuState === STATE.RUNNING) {\n    doPauseDrive(cpuState === STATE.RUNNING)\n  }\n  updateExternalMachineState()\n  resetRefreshCounter()\n  if (speed === 0) {\n    speed = 1\n    doSaveTimeSlice()\n    doAdvance6502Timer()\n  }\n}\n\nexport const doSetBinaryBlock = (addr: number, data: Uint8Array, run: boolean) => {\n  const loadBlock = () => {\n    setMemoryBlock(addr, data)\n    if (run) {\n      setPC(addr)\n    }\n  }\n  if (cpuState === STATE.IDLE) {\n    // Do not register our disk driver, just boot/reset to BASIC prompt.\n    doBoot(false)\n    doSetCPUState(STATE.NEED_RESET)\n    // Wait a bit for the cpu to boot and go to prompt.\n    setTimeout(() => {\n      // Now register our disk driver, after we've booted.\n      registerDiskDriver()\n      loadBlock()\n    }, 200)\n  } else {\n    loadBlock()\n  }\n}\n\nexport const getStackString = () => {\n  const stackvalues = memory.slice(256, 512)\n  const result = new Array<string>()\n  for (let i = 0xFF; i > s6502.StackPtr; i--) {\n    let value = \"$\" + toHex(stackvalues[i])\n    let cmd = stack[i]\n    if ((stack[i].length > 3) && (i - 1) > s6502.StackPtr) {\n      if (stack[i-1] === \"JSR\" || stack[i-1] === \"BRK\") {\n        i--\n        value += toHex(stackvalues[i])\n      } else {\n        cmd = ''\n      }\n    }\n    value = (value + \"   \").substring(0, 6)\n    result.push(toHex(0x100 + i, 4) + \": \" + value + cmd)\n  }\n  return result\n}\n\nconst getDebugString = () => {\n  return ''\n  // const status = Array<String>(16).fill(\"\")\n  // // const stackString = getStackString()\n  // // for (let i = 0; i < Math.min(20, stackString.length); i++) {\n  // //   status[i] = stackString[i]\n  // // }\n  // for (let j = 0; j < 16; j++) {\n  //   let s = toHex(16 * j) + \":\"\n  //   for (let i = 0; i < 16; i++) {\n  //     s += \" \" + toHex(mainMem[j * 16 + i])\n  //   }\n  //   status[j] = s\n  // }\n  // return status.join('\\n')\n}\n\nconst updateExternalMachineState = () => {\n  const state: MachineState = {\n    state: cpuState,\n    speed: speed,\n    altChar: SWITCHES.ALTCHARSET.isSet,\n    textPage: getTextPage(),\n    lores: getTextPage(true),\n    hires: getHires(),\n    zeroPageStack: getDebugString(),\n    button0: SWITCHES.PB0.isSet,\n    button1: SWITCHES.PB1.isSet,\n    canGoBackward: getGoBackwardIndex() >= 0,\n    canGoForward: getGoForwardIndex() >= 0\n  }\n  passMachineState(state)\n}\n\nconst doAdvance6502 = () => {\n  const newTime = performance.now()\n  timeDelta = newTime - prevTime\n  if (timeDelta < refreshTime) return\n  prevTime = newTime\n  if (cpuState === STATE.IDLE || cpuState === STATE.PAUSED) {\n    return;\n  }\n  if (cpuState === STATE.NEED_BOOT) {\n    doBoot();\n    doSetCPUState(STATE.RUNNING)\n  } else if (cpuState === STATE.NEED_RESET) {\n    doReset();\n    doSetCPUState(STATE.RUNNING)\n  }\n  let cycleTotal = 0\n  while (true) {\n    const cycles = processInstruction();\n    if (cycles < 0) break\n    cycleTotal += cycles;\n    if (cycleTotal >= 12480) {\n      if (inVBL === false) {\n        startVBL()\n      }\n    }\n    if (cycleTotal >= 17030) {\n      endVBL()\n      break;\n    }\n  }\n  iRefresh++\n  speed = Math.round((iRefresh * 1703) / (performance.now() - startTime)) / 100\n  if (iRefresh % 2) {\n    handleGamepads()\n    updateExternalMachineState()\n  }\n  if (saveTimeSlice) {\n    saveTimeSlice = false\n//    console.log(\"iSaveState \" + iSaveState)\n    saveStates[iSaveState] = doGetSaveState()\n    iSaveState = (iSaveState + 1) % maxState\n    iTempState = iSaveState\n  }\n}\n\nconst doAdvance6502Timer = () => {\n  doAdvance6502()\n  const iRefreshFinish = (iRefresh + 1)\n  while (cpuState === STATE.RUNNING && iRefresh !== iRefreshFinish) {\n    doAdvance6502()\n  }\n  setTimeout(doAdvance6502Timer, cpuState === STATE.RUNNING ? 0 : 20)\n}\n","import { doSetCPUState,\n  doGetSaveState, doRestoreSaveState, doSetNormalSpeed,\n  doGoBackInTime, doGoForwardInTime,\n  doStepInto, doStepOver, doStepOut, doSetBinaryBlock } from \"./motherboard\";\nimport { doSetDriveProps } from \"./drivestate\"\nimport { sendPastedText, sendTextToEmulator } from \"./keyboard\"\nimport { pressAppleCommandKey, setGamepads } from \"./joystick\"\nimport { DRIVE, MSG_MAIN, MSG_WORKER } from \"./utility\";\nimport { doSetBreakpoint, doSetDebug } from \"./cpu6502\";\n\n// This file must have worker types, but not DOM types.\n// The global should be that of a dedicated worker.\n\n// This fixes `self`'s type.\ndeclare var self: DedicatedWorkerGlobalScope;\nexport {};\n\nconst doPostMessage = (msg: MSG_WORKER, payload: any) => {\n  self.postMessage({msg, payload});\n}\n\nexport const passMachineState = (state: MachineState) => {\n  doPostMessage(MSG_WORKER.MACHINE_STATE, state)\n}\n\nexport const passClickSpeaker = (cycleCount: number) => {\n  doPostMessage(MSG_WORKER.CLICK, cycleCount)\n}\n\nexport const passDriveProps = (props: DriveProps) => {\n  doPostMessage(MSG_WORKER.DRIVE_PROPS, props)\n}\n\nexport const passDriveSound = (sound: DRIVE) => {\n  doPostMessage(MSG_WORKER.DRIVE_SOUND, sound)\n}\n\nconst passSaveState = (saveState: EmulatorSaveState) => {\n  doPostMessage(MSG_WORKER.SAVE_STATE, saveState)\n}\n\nexport const passRumble = (params: GamePadActuatorEffect) => {\n  doPostMessage(MSG_WORKER.RUMBLE, params)\n}\n\nexport const passHelptext = (helptext: string) => {\n  doPostMessage(MSG_WORKER.HELP_TEXT, helptext)\n}\n\nself.onmessage = (e: MessageEvent) => {\n  switch (e.data.msg as MSG_MAIN) {\n    case MSG_MAIN.STATE:\n      doSetCPUState(e.data.payload)\n      break;\n    case MSG_MAIN.DEBUG:\n      doSetDebug(e.data.payload)\n      break;\n    case MSG_MAIN.BREAKPOINT:\n      doSetBreakpoint(e.data.payload)\n      break;\n    case MSG_MAIN.STEP_INTO:\n      doStepInto()\n      break;\n    case MSG_MAIN.STEP_OVER:\n      doStepOver()\n      break;\n    case MSG_MAIN.STEP_OUT:\n      doStepOut()\n      break;\n    case MSG_MAIN.SPEED:\n      doSetNormalSpeed(e.data.payload)\n      break;\n    case MSG_MAIN.TIME_TRAVEL:\n      if (e.data.payload === \"FORWARD\") {\n          doGoForwardInTime()\n      } else {\n          doGoBackInTime()\n      }\n      break;\n    case MSG_MAIN.RESTORE_STATE:\n      doRestoreSaveState(e.data.payload as EmulatorSaveState)\n      break;\n    case MSG_MAIN.KEYPRESS:\n      sendTextToEmulator(e.data.payload)\n      break;\n    case MSG_MAIN.MOUSEEVENT:\n      // do something here later\n      break;\n    case MSG_MAIN.PASTE_TEXT:\n      sendPastedText(e.data.payload)\n      break;\n    case MSG_MAIN.APPLE_PRESS:\n      pressAppleCommandKey(true, e.data.payload)\n      break;\n    case MSG_MAIN.APPLE_RELEASE:\n      pressAppleCommandKey(false, e.data.payload)\n      break;\n    case MSG_MAIN.GET_SAVE_STATE:\n      passSaveState(doGetSaveState(true))\n      break;\n    case MSG_MAIN.DRIVE_PROPS:\n      const props = e.data.payload as DriveProps\n      doSetDriveProps(props)\n      break;\n    case MSG_MAIN.GAMEPAD:\n      setGamepads(e.data.payload)\n      break\n    case MSG_MAIN.SET_BINARY_BLOCK:\n      const memBlock = e.data.payload as SetMemoryBlock\n      doSetBinaryBlock(memBlock.address, memBlock.data, memBlock.run)\n      break\n      default:\n      console.error(`worker2main: unhandled msg: ${e.data.msg}`)\n      break;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [669], function() { return __webpack_require__(3973); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"2c2d9b94\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t973: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkapple2ts\"] = self[\"webpackChunkapple2ts\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(669).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["gamePads","gameMapping","gamePadMapping","STATE","MSG_WORKER","MSG_MAIN","DRIVE","MODE","isRelativeInstr","instr","startsWith","toHex","value","ndigits","arguments","length","undefined","toString","toUpperCase","slice","getInstrString","code","vLo","vHi","PC","result","concat","_modeString","mode","prefix","suffix","IMM","ZP_X","ABS_X","ZP_Y","ABS_Y","IND","IND_X","IND_Y","modeString","_modeString2","_slicedToArray","name","addr","address","toASCII","Uint8Array","s","split","map","char","charCodeAt","uint32toBytes","n","replaceSuffix","fname","i","lastIndexOf","substring","crcTable","Uint32Array","fill","crc32","data","offset","c","k","makeCRCTable","crc","maxTimeoutCycles","Math","trunc","paddle0timeout","paddle1timeout","paddle2timeout","paddle3timeout","countStart","leftAppleDown","rightAppleDown","leftButtonDown","rightButtonDown","isPB2down","isLeftDown","isRightDown","setLeftButtonDown","setRightButtonDown","valueToTimeout","min","max","setGamepad0","setGamepad1","setGamepad2","setGamepad3","setButtonState","SWITCHES","PB0","isSet","PB1","PB2","pressAppleCommandKey","isDown","left","checkJoystickValues","cycleCount","diff","memSetC000","isKeyboardJoystick","nearZero","handleGamepad","gp","stick","axes","xstick","ystick","dist","sqrt","clip","abs","convertGamepadAxes","joystick","buttonPressed","buttons","forEach","button","rumble","leftdown","rightdown","buttonreleased","threshold","aztec","keymap","addToBuffer","addToBufferDebounce","gamepad","str","getTextPageAsString","includes","setup","helptext","firebug","memB6","memB7","karateka","newValue","memGet","passRumble","startDelay","duration","weakMagnitude","strongMagnitude","noxarchaist","key","snoggle","memSet","wizardry","wolfenstein","gameLibrary","Array","AddGameLibraryItem","item","isArray","push","apply","_toConsumableArray","defaultButtons","dualJoysticks","isJoystick2","defaultGame","handleKeyMapping","_i","_gameLibrary","game","matchMemory","getGameMapping","_i2","_gameLibrary2","handleGameSetup","reset","_i3","_gameLibrary3","passHelptext","keyBuffer","tPrevPop","popKey","t","performance","now","memGetC000","keyPress","doSaveTimeSlice","prevKey","text","tPrev","timeout","sswitch","NewSwitch","offAddr","isSetAddr","onAddr","writeOnly","setFunc","rand","floor","random","STORE80","RAMRD","RAMWRT","INTCXROM","ALTZP","SLOTC3ROM","COLUMN80","ALTCHARSET","KBRDSTROBE","keyvalue","BSRBANK2","BSRREADRAM","CASSOUT","SPEAKER","passClickSpeaker","GCSTROBE","EMUBYTE","TEXT","MIXED","PAGE2","HIRES","AN0","AN1","AN2","AN3","CASSIN1","JOYSTICK12","JOYSTICK34","CASSIN2","FASTCHIP_LOCK","FASTCHIP_ENABLE","FASTCHIP_SPEED","JOYSTICKRESET","resetJoystick","BANKSEL","LASER128EX","READBSR2","WRITEBSR2","OFFBSR2","RDWRBSR2","READBSR1","WRITEBSR1","OFFBSR1","RDWRBSR1","skipDebugFlags","checkSoftSwitches","calledFromMemSet","console","log","s6502","handleBankedRAM","sswitch1","error","memory","addressGetTable","addressSetTable","ROMindexMinusC0","AUXindex","ROMstartMinusC000","AUXstart","slotIsActive","slot","updateAddressTables","offsetAuxRead","offsetAuxWrite","offsetPage2","offsetTextPageRead","offsetTextPageWrite","offsetHgrPageRead","offsetHgrPageWrite","updateMainAuxMemoryTable","offsetZP","updateReadBankSwitchedRamTable","updateWriteBankSwitchedRamTable","page","updateSlotRomTable","specialJumpTable","Map","slotIOCallbackTable","checkSlotIO","fn","setSlotIOCallback","setSlotDriver","driver","jump","set","SLOTstartMinusC100","memoryReset","rom64","replace","rom","Buffer","from","inVBL","memGetSoftSwitch","shifted","memSetSoftSwitch","repeat","start","getTextPage","jstart","jend","is80column","pageOffset","textPage","j","joffset","getHires","doubleRes","nlines","hgrPage","setMemoryBlock","PStatus","Accum","XReg","YReg","StackPtr","setX","setY","setCycleCount","cycles","incrementPC","setPC","setPStatus","stack","pushStack","call","popStack","isNaN","Error","isCarry","setCarry","isZero","setZero","setInterruptDisabled","isDecimal","BCD","setDecimal","setBreak","isOverflow","setOverflow","isNegative","setNegative","checkStatus","doBranch","takeBranch","oldPC","pageBoundary","oneByteAdd","twoByteAdd","addr1","addr2","pcodes","PCODE","pcode","assert","execute","doIndirectYinstruction","vZP","doInstruction","addBCD","doIndirectInstruction","doADC_BCD","ones","tmp","bothPositive","bothNegative","doADC_HEX","doADC","ZP_REL","ABS","vOffset","doAND","doASL","v","IMPLIED","doBit","doInterrupt","pcOffset","PCreturn","doBrk","doInterruptRequest","doCMP","doCMP1","doCPX","doCPY","doDEC","doEOR","doINC","a","PC2","doLDA","doLDX","doLDY","doLSR","doORA","doROL","bit0","doROR","bit7","doSBC_BCD","vtmp","newCarry","doSBC","doSTA","write_byte","woz","position","shift","byte_position","write_4_and_4","write_sync","encode_6_and_2","src","six_and_two_mapping","dest","bit_reverse","location","serialise_track","track_number","is_prodos","track_position","sector","ls","contents","decodeDSK","driveState","diskData","newData","dskData","isPO","trackInput","trackData","convertdsk2woz","filename","toLowerCase","endsWith","diskHasChanges","int32","isHardDriveImage","f","decodeDiskData","hardDrive","status","nbytes","magic","String","fromCharCode","decode2MG","isDSK","isWoz2","find","isWriteProtected","storedCRC","pow","actualCRC","alert","htrack","tmap_index","tmap_offset","trk","trackStart","trackNbits","decodeWoz2","isWoz1","decodeWoz1","motorOffTimeout","SWITCH","MOTOR_OFF","MOTOR_ON","DRIVE1","DRIVE2","DATA_LATCH_OFF","DATA_LATCH_ON","WRITE_OFF","WRITE_ON","MOTOR_RUNNING","DATA_LATCH","doResetDiskDrive","doMotorTimeout","halftrack","prevHalfTrack","moveHead","ds","passDriveSound","TRACK_END","TRACK_SEEK","passData","trackLocation","pickbit","clearbit","getNextBit","dd","bit","byte","b","dataRegister","prevCycleCount","doWriteBit","fileOffset","doWriteByte","delta","debugCache","motorRunning","startMotor","clearTimeout","dumpData","STEPPER_MOTORS","handleDriveSoftSwitches","getCurrentDriveState","getCurrentDriveData","writeMode","getNextByte","setTimeout","stopMotor","currentDrive","dsOld","setCurrentDrive","ascend","currentPhase","descend","parseNumberOptionalAddressMode","operand","parseInt","labels","getOperandModeValue","pc","pass","match","labelOperand","label","operation","splitOperand","isImmediate","parseOnce","instructions","prevLabel","line","trimEnd","codeLine","splitLine","parts","_parseNumberOptionalA","_parseNumberOptionalA2","handleLabel","_getOperandModeValue","_getOperandModeValue2","findIndex","newInstructions","getHexCodesForInstruction","parseAssembly","timerID","driverAddr","code1","enableHardDrive","enable","pcode1","pcode2","prodos8driver","processHardDriveBlockAccess","processSmartPortAccess","getHardDriveState","getHardDriveData","S","callAddr","spCommand","spParamList","unitNumber","bufferAddr","statusCode","blockStart","dataRead","block","dataLen","nblocks","dataWrite","getDataBlock","initDriveState","drive","driveData","dprops","passDriveProps","getDriveSaveState","full","doPauseDrive","doPauseDiskDrive","disk2driver","doDebug","instrTrail","posTrail","breakpoint","runToRTS","doSetDebug","flagIRQ","flagNMI","processInstruction","step","PC1","doSetCPUState","PAUSED","get","ins","out","P","getProcessorStatus","zeroPad","num","places","padStart","handleClockRead","date","Date","output","getMonth","getDay","getDate","getHours","getMinutes","currentSlot","handleMockingboard","debugSlot","startTime","prevTime","speed","refreshTime","cpuState","IDLE","iRefresh","saveTimeSlice","iSaveState","iTempState","saveStates","getApple2State","save6502","JSON","parse","stringify","softSwitches","setApple2State","newState","new6502","keyTyped","doGetSaveState","emulator","state6502","doRestoreSaveState","sState","restoreDriveSaveState","updateExternalMachineState","registerDiskDriver","doBoot","setDrive","enableClockCard","enableMockingboard","doReset","getGoBackwardIndex","newTmp","getGoForwardIndex","doStepInto","doStepOut","doSetRunToRTS","RUNNING","resetRefreshCounter","cpuStateIn","doAdvance6502Timer","state","altChar","lores","hires","zeroPageStack","button0","button1","canGoBackward","canGoForward","passMachineState","doAdvance6502","newTime","NEED_BOOT","NEED_RESET","cycleTotal","round","iRefreshFinish","doPostMessage","msg","payload","self","postMessage","MACHINE_STATE","CLICK","props","DRIVE_PROPS","sound","DRIVE_SOUND","params","RUMBLE","HELP_TEXT","onmessage","e","DEBUG","BREAKPOINT","breakpt","STEP_INTO","STEP_OVER","STEP_OUT","SPEED","normal","TIME_TRAVEL","doGoForwardInTime","doGoBackInTime","RESTORE_STATE","KEYPRESS","MOUSEEVENT","PASTE_TEXT","sendPastedText","APPLE_PRESS","APPLE_RELEASE","GET_SAVE_STATE","saveState","SAVE_STATE","doSetDriveProps","GAMEPAD","gamePadsIn","SET_BINARY_BLOCK","memBlock","run","loadBlock","doSetBinaryBlock","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}